
PowerBoat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800488c  0800488c  0001488c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048c4  080048c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080048c4  080048c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048c4  080048c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080048cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000013c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000148  20000148  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ddae  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019b1  00000000  00000000  0002ddea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  0002f7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b68  00000000  00000000  00030380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fc09  00000000  00000000  00030ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed40  00000000  00000000  00050af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5e62  00000000  00000000  0005f831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00125693  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000331c  00000000  00000000  001256e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004874 	.word	0x08004874

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004874 	.word	0x08004874

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	0000      	movs	r0, r0
	...

08000848 <WriteToMotor>:
static void MX_USART2_UART_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
//change the motor speed
  void WriteToMotor(int speed) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if ((speed >= -100) && (speed <= 100)) { // make sure speed value is in range
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000856:	db42      	blt.n	80008de <WriteToMotor+0x96>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b64      	cmp	r3, #100	; 0x64
 800085c:	dc3f      	bgt.n	80008de <WriteToMotor+0x96>
		float sp;
		int base = 167;
 800085e:	23a7      	movs	r3, #167	; 0xa7
 8000860:	60fb      	str	r3, [r7, #12]
		sp = speed *0.55; // in ms -- maps -100 to 100 values to 100 - 200
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff34 	bl	80006d0 <__aeabi_i2d>
 8000868:	a320      	add	r3, pc, #128	; (adr r3, 80008ec <WriteToMotor+0xa4>)
 800086a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800086e:	f7ff fcb3 	bl	80001d8 <__aeabi_dmul>
 8000872:	4602      	mov	r2, r0
 8000874:	460b      	mov	r3, r1
 8000876:	4610      	mov	r0, r2
 8000878:	4619      	mov	r1, r3
 800087a:	f7ff ff93 	bl	80007a4 <__aeabi_d2f>
 800087e:	4603      	mov	r3, r0
 8000880:	60bb      	str	r3, [r7, #8]
		sp += base;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	ee07 3a90 	vmov	s15, r3
 8000888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800088c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000894:	edc7 7a02 	vstr	s15, [r7, #8]
		if (speed > 0) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	dd09      	ble.n	80008b2 <WriteToMotor+0x6a>
			// turn forwards
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, sp);
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <WriteToMotor+0xa0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80008a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008aa:	ee17 2a90 	vmov	r2, s15
 80008ae:	63da      	str	r2, [r3, #60]	; 0x3c
		} else {
			// turn off
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, sp);
		}
	}
  }
 80008b0:	e015      	b.n	80008de <WriteToMotor+0x96>
		} else if (speed < 0) {
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	da09      	bge.n	80008cc <WriteToMotor+0x84>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, sp);
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <WriteToMotor+0xa0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80008c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008c4:	ee17 2a90 	vmov	r2, s15
 80008c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
 80008ca:	e008      	b.n	80008de <WriteToMotor+0x96>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, sp);
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <WriteToMotor+0xa0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80008d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008d8:	ee17 2a90 	vmov	r2, s15
 80008dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000028 	.word	0x20000028
 80008ec:	9999999a 	.word	0x9999999a
 80008f0:	3fe19999 	.word	0x3fe19999

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f8:	f000 fb7c 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fc:	f000 f834 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000900:	f000 f998 	bl	8000c34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000904:	f000 f966 	bl	8000bd4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000908:	f000 f890 	bl	8000a2c <MX_TIM3_Init>
  MX_TIM4_Init();
 800090c:	f000 f914 	bl	8000b38 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000910:	2108      	movs	r1, #8
 8000912:	4814      	ldr	r0, [pc, #80]	; (8000964 <main+0x70>)
 8000914:	f002 fbd4 	bl	80030c0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
	  // IF Button Is Pressed
	    	if((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_9))) // if forward
 8000918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f000 fe3e 	bl	80015a0 <HAL_GPIO_ReadPin>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d002      	beq.n	8000930 <main+0x3c>
	    	{
	    		WriteToMotor(30);
 800092a:	201e      	movs	r0, #30
 800092c:	f7ff ff8c 	bl	8000848 <WriteToMotor>
	    	}
	    	if((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_8))) // if reverse
 8000930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f000 fe32 	bl	80015a0 <HAL_GPIO_ReadPin>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d003      	beq.n	800094a <main+0x56>
	    	  	{
	    		WriteToMotor(-30);
 8000942:	f06f 001d 	mvn.w	r0, #29
 8000946:	f7ff ff7f 	bl	8000848 <WriteToMotor>
	    	  	}
	    	if((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_7))) // if stop
 800094a:	2180      	movs	r1, #128	; 0x80
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f000 fe26 	bl	80015a0 <HAL_GPIO_ReadPin>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0de      	beq.n	8000918 <main+0x24>
	    	  	{
	    		WriteToMotor(0);
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff ff74 	bl	8000848 <WriteToMotor>
	    	if((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_9))) // if forward
 8000960:	e7da      	b.n	8000918 <main+0x24>
 8000962:	bf00      	nop
 8000964:	20000028 	.word	0x20000028

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b0a6      	sub	sp, #152	; 0x98
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000972:	2228      	movs	r2, #40	; 0x28
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f003 ff74 	bl	8004864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2258      	movs	r2, #88	; 0x58
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f003 ff66 	bl	8004864 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000998:	2302      	movs	r3, #2
 800099a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800099c:	2301      	movs	r3, #1
 800099e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a0:	2310      	movs	r3, #16
 80009a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a6:	2302      	movs	r3, #2
 80009a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fe1a 	bl	8001600 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009d2:	f000 f9b3 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009f0:	2102      	movs	r1, #2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fe58 	bl	80026a8 <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009fe:	f000 f99d 	bl	8000d3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM34;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <SystemClock_Config+0xc0>)
 8000a04:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 f87f 	bl	8002b14 <HAL_RCCEx_PeriphCLKConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a1c:	f000 f98e 	bl	8000d3c <Error_Handler>
  }
}
 8000a20:	bf00      	nop
 8000a22:	3798      	adds	r7, #152	; 0x98
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	00200002 	.word	0x00200002

08000a2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08e      	sub	sp, #56	; 0x38
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <MX_TIM3_Init+0x104>)
 8000a60:	4a34      	ldr	r2, [pc, #208]	; (8000b34 <MX_TIM3_Init+0x108>)
 8000a62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 650;
 8000a64:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <MX_TIM3_Init+0x104>)
 8000a66:	f240 228a 	movw	r2, #650	; 0x28a
 8000a6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <MX_TIM3_Init+0x104>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <MX_TIM3_Init+0x104>)
 8000a74:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <MX_TIM3_Init+0x104>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <MX_TIM3_Init+0x104>)
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a86:	482a      	ldr	r0, [pc, #168]	; (8000b30 <MX_TIM3_Init+0x104>)
 8000a88:	f002 fa62 	bl	8002f50 <HAL_TIM_Base_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000a92:	f000 f953 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4823      	ldr	r0, [pc, #140]	; (8000b30 <MX_TIM3_Init+0x104>)
 8000aa4:	f002 fd2c 	bl	8003500 <HAL_TIM_ConfigClockSource>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000aae:	f000 f945 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ab2:	481f      	ldr	r0, [pc, #124]	; (8000b30 <MX_TIM3_Init+0x104>)
 8000ab4:	f002 faa3 	bl	8002ffe <HAL_TIM_PWM_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000abe:	f000 f93d 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4817      	ldr	r0, [pc, #92]	; (8000b30 <MX_TIM3_Init+0x104>)
 8000ad2:	f003 fa43 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000adc:	f000 f92e 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae0:	2360      	movs	r3, #96	; 0x60
 8000ae2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 25;
 8000ae4:	2319      	movs	r3, #25
 8000ae6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af0:	463b      	mov	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	4619      	mov	r1, r3
 8000af6:	480e      	ldr	r0, [pc, #56]	; (8000b30 <MX_TIM3_Init+0x104>)
 8000af8:	f002 fbee 	bl	80032d8 <HAL_TIM_PWM_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000b02:	f000 f91b 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2208      	movs	r2, #8
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4807      	ldr	r0, [pc, #28]	; (8000b30 <MX_TIM3_Init+0x104>)
 8000b12:	f002 fbe1 	bl	80032d8 <HAL_TIM_PWM_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8000b1c:	f000 f90e 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b20:	4803      	ldr	r0, [pc, #12]	; (8000b30 <MX_TIM3_Init+0x104>)
 8000b22:	f000 f969 	bl	8000df8 <HAL_TIM_MspPostInit>

}
 8000b26:	bf00      	nop
 8000b28:	3738      	adds	r7, #56	; 0x38
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000028 	.word	0x20000028
 8000b34:	40000400 	.word	0x40000400

08000b38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3e:	f107 0310 	add.w	r3, r7, #16
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <MX_TIM4_Init+0x94>)
 8000b58:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <MX_TIM4_Init+0x98>)
 8000b5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_TIM4_Init+0x94>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_TIM4_Init+0x94>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_TIM4_Init+0x94>)
 8000b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_TIM4_Init+0x94>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_TIM4_Init+0x94>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b7c:	4813      	ldr	r0, [pc, #76]	; (8000bcc <MX_TIM4_Init+0x94>)
 8000b7e:	f002 f9e7 	bl	8002f50 <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000b88:	f000 f8d8 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	4619      	mov	r1, r3
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <MX_TIM4_Init+0x94>)
 8000b9a:	f002 fcb1 	bl	8003500 <HAL_TIM_ConfigClockSource>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000ba4:	f000 f8ca 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_TIM4_Init+0x94>)
 8000bb6:	f003 f9d1 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000bc0:	f000 f8bc 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000074 	.word	0x20000074
 8000bd0:	40000800 	.word	0x40000800

08000bd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bda:	4a15      	ldr	r2, [pc, #84]	; (8000c30 <MX_USART2_UART_Init+0x5c>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000be0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000be4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c18:	f003 fa2c 	bl	8004074 <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c22:	f000 f88b 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000c0 	.word	0x200000c0
 8000c30:	40004400 	.word	0x40004400

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	4b3a      	ldr	r3, [pc, #232]	; (8000d34 <MX_GPIO_Init+0x100>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	4a39      	ldr	r2, [pc, #228]	; (8000d34 <MX_GPIO_Init+0x100>)
 8000c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c54:	6153      	str	r3, [r2, #20]
 8000c56:	4b37      	ldr	r3, [pc, #220]	; (8000d34 <MX_GPIO_Init+0x100>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c62:	4b34      	ldr	r3, [pc, #208]	; (8000d34 <MX_GPIO_Init+0x100>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	4a33      	ldr	r2, [pc, #204]	; (8000d34 <MX_GPIO_Init+0x100>)
 8000c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c6c:	6153      	str	r3, [r2, #20]
 8000c6e:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <MX_GPIO_Init+0x100>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <MX_GPIO_Init+0x100>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	4a2d      	ldr	r2, [pc, #180]	; (8000d34 <MX_GPIO_Init+0x100>)
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	6153      	str	r3, [r2, #20]
 8000c86:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <MX_GPIO_Init+0x100>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <MX_GPIO_Init+0x100>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a27      	ldr	r2, [pc, #156]	; (8000d34 <MX_GPIO_Init+0x100>)
 8000c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <MX_GPIO_Init+0x100>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f000 fc8c 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cbe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481a      	ldr	r0, [pc, #104]	; (8000d38 <MX_GPIO_Init+0x104>)
 8000cd0:	f000 fadc 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10|GPIO_PIN_11;
 8000cd4:	f44f 6342 	mov.w	r3, #3104	; 0xc20
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f000 facc 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	480b      	ldr	r0, [pc, #44]	; (8000d38 <MX_GPIO_Init+0x104>)
 8000d0a:	f000 fabf 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d26:	f000 fab1 	bl	800128c <HAL_GPIO_Init>

}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000
 8000d38:	48000800 	.word	0x48000800

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_MspInit+0x44>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <HAL_MspInit+0x44>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_MspInit+0x44>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_MspInit+0x44>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_MspInit+0x44>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_MspInit+0x44>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d7e:	2007      	movs	r0, #7
 8000d80:	f000 fa50 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a13      	ldr	r2, [pc, #76]	; (8000dec <HAL_TIM_Base_MspInit+0x5c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10c      	bne.n	8000dbc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <HAL_TIM_Base_MspInit+0x60>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <HAL_TIM_Base_MspInit+0x60>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_TIM_Base_MspInit+0x60>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dba:	e010      	b.n	8000dde <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <HAL_TIM_Base_MspInit+0x64>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d10b      	bne.n	8000dde <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <HAL_TIM_Base_MspInit+0x60>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <HAL_TIM_Base_MspInit+0x60>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	61d3      	str	r3, [r2, #28]
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <HAL_TIM_Base_MspInit+0x60>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40000400 	.word	0x40000400
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40000800 	.word	0x40000800

08000df8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a20      	ldr	r2, [pc, #128]	; (8000e98 <HAL_TIM_MspPostInit+0xa0>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d139      	bne.n	8000e8e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <HAL_TIM_MspPostInit+0xa4>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	4a1f      	ldr	r2, [pc, #124]	; (8000e9c <HAL_TIM_MspPostInit+0xa4>)
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e24:	6153      	str	r3, [r2, #20]
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_TIM_MspPostInit+0xa4>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <HAL_TIM_MspPostInit+0xa4>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_TIM_MspPostInit+0xa4>)
 8000e38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_TIM_MspPostInit+0xa4>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e4a:	2340      	movs	r3, #64	; 0x40
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f000 fa10 	bl	800128c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <HAL_TIM_MspPostInit+0xa8>)
 8000e8a:	f000 f9ff 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40000400 	.word	0x40000400
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48000800 	.word	0x48000800

08000ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <HAL_UART_MspInit+0x7c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d128      	bne.n	8000f18 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	6153      	str	r3, [r2, #20]
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f06:	2307      	movs	r3, #7
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f000 f9ba 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	; 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40004400 	.word	0x40004400
 8000f24:	40021000 	.word	0x40021000

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 f884 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <SystemInit+0x20>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <SystemInit+0x20>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa6:	490e      	ldr	r1, [pc, #56]	; (8000fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <LoopForever+0xe>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fbc:	4c0b      	ldr	r4, [pc, #44]	; (8000fec <LoopForever+0x16>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fca:	f7ff ffd7 	bl	8000f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f003 fc25 	bl	800481c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fd2:	f7ff fc8f 	bl	80008f4 <main>

08000fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd6:	e7fe      	b.n	8000fd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fd8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fe4:	080048cc 	.word	0x080048cc
  ldr r2, =_sbss
 8000fe8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fec:	20000148 	.word	0x20000148

08000ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC1_2_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_Init+0x28>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_Init+0x28>)
 8000ffe:	f043 0310 	orr.w	r3, r3, #16
 8001002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f90d 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f808 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001010:	f7ff fe9a 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40022000 	.word	0x40022000

08001020 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x54>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x58>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f917 	bl	8001272 <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e00e      	b.n	800106c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d80a      	bhi.n	800106a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f000 f8ed 	bl	800123a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <HAL_InitTick+0x5c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000000 	.word	0x20000000
 8001078:	20000008 	.word	0x20000008
 800107c:	20000004 	.word	0x20000004

08001080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000144 	.word	0x20000144

080010a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000144 	.word	0x20000144

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f7ff ff8e 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff47 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff5c 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff8e 	bl	8001178 <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5d 	bl	8001124 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffb0 	bl	80011e0 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129a:	e160      	b.n	800155e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8152 	beq.w	8001558 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d005      	beq.n	80012cc <HAL_GPIO_Init+0x40>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f003 0201 	and.w	r2, r3, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b03      	cmp	r3, #3
 8001338:	d017      	beq.n	800136a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d123      	bne.n	80013be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	6939      	ldr	r1, [r7, #16]
 80013ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0203 	and.w	r2, r3, #3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80ac 	beq.w	8001558 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001400:	4b5e      	ldr	r3, [pc, #376]	; (800157c <HAL_GPIO_Init+0x2f0>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a5d      	ldr	r2, [pc, #372]	; (800157c <HAL_GPIO_Init+0x2f0>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b5b      	ldr	r3, [pc, #364]	; (800157c <HAL_GPIO_Init+0x2f0>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001418:	4a59      	ldr	r2, [pc, #356]	; (8001580 <HAL_GPIO_Init+0x2f4>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001442:	d025      	beq.n	8001490 <HAL_GPIO_Init+0x204>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a4f      	ldr	r2, [pc, #316]	; (8001584 <HAL_GPIO_Init+0x2f8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d01f      	beq.n	800148c <HAL_GPIO_Init+0x200>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a4e      	ldr	r2, [pc, #312]	; (8001588 <HAL_GPIO_Init+0x2fc>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d019      	beq.n	8001488 <HAL_GPIO_Init+0x1fc>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a4d      	ldr	r2, [pc, #308]	; (800158c <HAL_GPIO_Init+0x300>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d013      	beq.n	8001484 <HAL_GPIO_Init+0x1f8>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a4c      	ldr	r2, [pc, #304]	; (8001590 <HAL_GPIO_Init+0x304>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d00d      	beq.n	8001480 <HAL_GPIO_Init+0x1f4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a4b      	ldr	r2, [pc, #300]	; (8001594 <HAL_GPIO_Init+0x308>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x1f0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a4a      	ldr	r2, [pc, #296]	; (8001598 <HAL_GPIO_Init+0x30c>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d101      	bne.n	8001478 <HAL_GPIO_Init+0x1ec>
 8001474:	2306      	movs	r3, #6
 8001476:	e00c      	b.n	8001492 <HAL_GPIO_Init+0x206>
 8001478:	2307      	movs	r3, #7
 800147a:	e00a      	b.n	8001492 <HAL_GPIO_Init+0x206>
 800147c:	2305      	movs	r3, #5
 800147e:	e008      	b.n	8001492 <HAL_GPIO_Init+0x206>
 8001480:	2304      	movs	r3, #4
 8001482:	e006      	b.n	8001492 <HAL_GPIO_Init+0x206>
 8001484:	2303      	movs	r3, #3
 8001486:	e004      	b.n	8001492 <HAL_GPIO_Init+0x206>
 8001488:	2302      	movs	r3, #2
 800148a:	e002      	b.n	8001492 <HAL_GPIO_Init+0x206>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <HAL_GPIO_Init+0x206>
 8001490:	2300      	movs	r3, #0
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	f002 0203 	and.w	r2, r2, #3
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	4093      	lsls	r3, r2
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014a2:	4937      	ldr	r1, [pc, #220]	; (8001580 <HAL_GPIO_Init+0x2f4>)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3302      	adds	r3, #2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b0:	4b3a      	ldr	r3, [pc, #232]	; (800159c <HAL_GPIO_Init+0x310>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014d4:	4a31      	ldr	r2, [pc, #196]	; (800159c <HAL_GPIO_Init+0x310>)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <HAL_GPIO_Init+0x310>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014fe:	4a27      	ldr	r2, [pc, #156]	; (800159c <HAL_GPIO_Init+0x310>)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001504:	4b25      	ldr	r3, [pc, #148]	; (800159c <HAL_GPIO_Init+0x310>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001528:	4a1c      	ldr	r2, [pc, #112]	; (800159c <HAL_GPIO_Init+0x310>)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_GPIO_Init+0x310>)
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <HAL_GPIO_Init+0x310>)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3301      	adds	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	f47f ae97 	bne.w	800129c <HAL_GPIO_Init+0x10>
  }
}
 800156e:	bf00      	nop
 8001570:	bf00      	nop
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000
 8001584:	48000400 	.word	0x48000400
 8001588:	48000800 	.word	0x48000800
 800158c:	48000c00 	.word	0x48000c00
 8001590:	48001000 	.word	0x48001000
 8001594:	48001400 	.word	0x48001400
 8001598:	48001800 	.word	0x48001800
 800159c:	40010400 	.word	0x40010400

080015a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	e001      	b.n	80015c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
 80015dc:	4613      	mov	r3, r2
 80015de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e0:	787b      	ldrb	r3, [r7, #1]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015ec:	e002      	b.n	80015f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001606:	af00      	add	r7, sp, #0
 8001608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800160c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001610:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001616:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	f001 b83a 	b.w	800269a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800162a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 816f 	beq.w	800191a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800163c:	4bb5      	ldr	r3, [pc, #724]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b04      	cmp	r3, #4
 8001646:	d00c      	beq.n	8001662 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001648:	4bb2      	ldr	r3, [pc, #712]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b08      	cmp	r3, #8
 8001652:	d15c      	bne.n	800170e <HAL_RCC_OscConfig+0x10e>
 8001654:	4baf      	ldr	r3, [pc, #700]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800165c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001660:	d155      	bne.n	800170e <HAL_RCC_OscConfig+0x10e>
 8001662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001666:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800166e:	fa93 f3a3 	rbit	r3, r3
 8001672:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001676:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167a:	fab3 f383 	clz	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	095b      	lsrs	r3, r3, #5
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d102      	bne.n	8001694 <HAL_RCC_OscConfig+0x94>
 800168e:	4ba1      	ldr	r3, [pc, #644]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	e015      	b.n	80016c0 <HAL_RCC_OscConfig+0xc0>
 8001694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001698:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80016a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016b0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80016b4:	fa93 f3a3 	rbit	r3, r3
 80016b8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016bc:	4b95      	ldr	r3, [pc, #596]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016c4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80016c8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80016cc:	fa92 f2a2 	rbit	r2, r2
 80016d0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80016d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016d8:	fab2 f282 	clz	r2, r2
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	f042 0220 	orr.w	r2, r2, #32
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	f002 021f 	and.w	r2, r2, #31
 80016e8:	2101      	movs	r1, #1
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 8111 	beq.w	8001918 <HAL_RCC_OscConfig+0x318>
 80016f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 8108 	bne.w	8001918 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	f000 bfc6 	b.w	800269a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001712:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x12e>
 8001720:	4b7c      	ldr	r3, [pc, #496]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a7b      	ldr	r2, [pc, #492]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 8001726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e036      	b.n	800179c <HAL_RCC_OscConfig+0x19c>
 800172e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001732:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x158>
 800173e:	4b75      	ldr	r3, [pc, #468]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a74      	ldr	r2, [pc, #464]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 8001744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b72      	ldr	r3, [pc, #456]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a71      	ldr	r2, [pc, #452]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 8001750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e021      	b.n	800179c <HAL_RCC_OscConfig+0x19c>
 8001758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x184>
 800176a:	4b6a      	ldr	r3, [pc, #424]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a69      	ldr	r2, [pc, #420]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 8001770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b67      	ldr	r3, [pc, #412]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a66      	ldr	r2, [pc, #408]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 800177c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e00b      	b.n	800179c <HAL_RCC_OscConfig+0x19c>
 8001784:	4b63      	ldr	r3, [pc, #396]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a62      	ldr	r2, [pc, #392]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 800178a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b60      	ldr	r3, [pc, #384]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a5f      	ldr	r2, [pc, #380]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 8001796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800179c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d059      	beq.n	8001860 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff fc7c 	bl	80010a8 <HAL_GetTick>
 80017b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b4:	e00a      	b.n	80017cc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b6:	f7ff fc77 	bl	80010a8 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	; 0x64
 80017c4:	d902      	bls.n	80017cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	f000 bf67 	b.w	800269a <HAL_RCC_OscConfig+0x109a>
 80017cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017d0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80017d8:	fa93 f3a3 	rbit	r3, r3
 80017dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80017e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d102      	bne.n	80017fe <HAL_RCC_OscConfig+0x1fe>
 80017f8:	4b46      	ldr	r3, [pc, #280]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	e015      	b.n	800182a <HAL_RCC_OscConfig+0x22a>
 80017fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001802:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001812:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001816:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800181a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800181e:	fa93 f3a3 	rbit	r3, r3
 8001822:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001826:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800182e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001832:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001836:	fa92 f2a2 	rbit	r2, r2
 800183a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800183e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001842:	fab2 f282 	clz	r2, r2
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	f042 0220 	orr.w	r2, r2, #32
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	f002 021f 	and.w	r2, r2, #31
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f202 	lsl.w	r2, r1, r2
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0ab      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1b6>
 800185e:	e05c      	b.n	800191a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fc22 	bl	80010a8 <HAL_GetTick>
 8001864:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001868:	e00a      	b.n	8001880 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800186a:	f7ff fc1d 	bl	80010a8 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d902      	bls.n	8001880 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	f000 bf0d 	b.w	800269a <HAL_RCC_OscConfig+0x109a>
 8001880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001884:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001894:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d102      	bne.n	80018b2 <HAL_RCC_OscConfig+0x2b2>
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	e015      	b.n	80018de <HAL_RCC_OscConfig+0x2de>
 80018b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80018be:	fa93 f3a3 	rbit	r3, r3
 80018c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80018c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80018ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80018d2:	fa93 f3a3 	rbit	r3, r3
 80018d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_RCC_OscConfig+0x314>)
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018e2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80018e6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80018ea:	fa92 f2a2 	rbit	r2, r2
 80018ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80018f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018f6:	fab2 f282 	clz	r2, r2
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	f042 0220 	orr.w	r2, r2, #32
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	f002 021f 	and.w	r2, r2, #31
 8001906:	2101      	movs	r1, #1
 8001908:	fa01 f202 	lsl.w	r2, r1, r2
 800190c:	4013      	ands	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ab      	bne.n	800186a <HAL_RCC_OscConfig+0x26a>
 8001912:	e002      	b.n	800191a <HAL_RCC_OscConfig+0x31a>
 8001914:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 817f 	beq.w	8001c2e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001930:	4ba7      	ldr	r3, [pc, #668]	; (8001bd0 <HAL_RCC_OscConfig+0x5d0>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00c      	beq.n	8001956 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800193c:	4ba4      	ldr	r3, [pc, #656]	; (8001bd0 <HAL_RCC_OscConfig+0x5d0>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b08      	cmp	r3, #8
 8001946:	d173      	bne.n	8001a30 <HAL_RCC_OscConfig+0x430>
 8001948:	4ba1      	ldr	r3, [pc, #644]	; (8001bd0 <HAL_RCC_OscConfig+0x5d0>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001954:	d16c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x430>
 8001956:	2302      	movs	r3, #2
 8001958:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001960:	fa93 f3a3 	rbit	r3, r3
 8001964:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001968:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d102      	bne.n	8001986 <HAL_RCC_OscConfig+0x386>
 8001980:	4b93      	ldr	r3, [pc, #588]	; (8001bd0 <HAL_RCC_OscConfig+0x5d0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	e013      	b.n	80019ae <HAL_RCC_OscConfig+0x3ae>
 8001986:	2302      	movs	r3, #2
 8001988:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001998:	2302      	movs	r3, #2
 800199a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800199e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019aa:	4b89      	ldr	r3, [pc, #548]	; (8001bd0 <HAL_RCC_OscConfig+0x5d0>)
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	2202      	movs	r2, #2
 80019b0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80019b4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80019b8:	fa92 f2a2 	rbit	r2, r2
 80019bc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80019c0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019c4:	fab2 f282 	clz	r2, r2
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	f042 0220 	orr.w	r2, r2, #32
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	f002 021f 	and.w	r2, r2, #31
 80019d4:	2101      	movs	r1, #1
 80019d6:	fa01 f202 	lsl.w	r2, r1, r2
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00a      	beq.n	80019f6 <HAL_RCC_OscConfig+0x3f6>
 80019e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d002      	beq.n	80019f6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f000 be52 	b.w	800269a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f6:	4b76      	ldr	r3, [pc, #472]	; (8001bd0 <HAL_RCC_OscConfig+0x5d0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	21f8      	movs	r1, #248	; 0xf8
 8001a0c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001a14:	fa91 f1a1 	rbit	r1, r1
 8001a18:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001a1c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a20:	fab1 f181 	clz	r1, r1
 8001a24:	b2c9      	uxtb	r1, r1
 8001a26:	408b      	lsls	r3, r1
 8001a28:	4969      	ldr	r1, [pc, #420]	; (8001bd0 <HAL_RCC_OscConfig+0x5d0>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2e:	e0fe      	b.n	8001c2e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8088 	beq.w	8001b52 <HAL_RCC_OscConfig+0x552>
 8001a42:	2301      	movs	r3, #1
 8001a44:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001a54:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a58:	fab3 f383 	clz	r3, r3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fb1b 	bl	80010a8 <HAL_GetTick>
 8001a72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff fb16 	bl	80010a8 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d902      	bls.n	8001a8e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	f000 be06 	b.w	800269a <HAL_RCC_OscConfig+0x109a>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001aa0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa4:	fab3 f383 	clz	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d102      	bne.n	8001abe <HAL_RCC_OscConfig+0x4be>
 8001ab8:	4b45      	ldr	r3, [pc, #276]	; (8001bd0 <HAL_RCC_OscConfig+0x5d0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	e013      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e6>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ad6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <HAL_RCC_OscConfig+0x5d0>)
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001aec:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001af0:	fa92 f2a2 	rbit	r2, r2
 8001af4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001af8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001afc:	fab2 f282 	clz	r2, r2
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	f042 0220 	orr.w	r2, r2, #32
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	f002 021f 	and.w	r2, r2, #31
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0af      	beq.n	8001a78 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_RCC_OscConfig+0x5d0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	21f8      	movs	r1, #248	; 0xf8
 8001b2e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001b36:	fa91 f1a1 	rbit	r1, r1
 8001b3a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001b3e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b42:	fab1 f181 	clz	r1, r1
 8001b46:	b2c9      	uxtb	r1, r1
 8001b48:	408b      	lsls	r3, r1
 8001b4a:	4921      	ldr	r1, [pc, #132]	; (8001bd0 <HAL_RCC_OscConfig+0x5d0>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	e06d      	b.n	8001c2e <HAL_RCC_OscConfig+0x62e>
 8001b52:	2301      	movs	r3, #1
 8001b54:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001b64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7ff fa93 	bl	80010a8 <HAL_GetTick>
 8001b82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b88:	f7ff fa8e 	bl	80010a8 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d902      	bls.n	8001b9e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	f000 bd7e 	b.w	800269a <HAL_RCC_OscConfig+0x109a>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001bb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x5d4>
 8001bc8:	4b01      	ldr	r3, [pc, #4]	; (8001bd0 <HAL_RCC_OscConfig+0x5d0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	e016      	b.n	8001bfc <HAL_RCC_OscConfig+0x5fc>
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001be6:	2302      	movs	r3, #2
 8001be8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001bec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001bf8:	4bbf      	ldr	r3, [pc, #764]	; (8001ef8 <HAL_RCC_OscConfig+0x8f8>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001c02:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001c06:	fa92 f2a2 	rbit	r2, r2
 8001c0a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001c0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c12:	fab2 f282 	clz	r2, r2
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f042 0220 	orr.w	r2, r2, #32
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	f002 021f 	and.w	r2, r2, #31
 8001c22:	2101      	movs	r1, #1
 8001c24:	fa01 f202 	lsl.w	r2, r1, r2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1ac      	bne.n	8001b88 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 8113 	beq.w	8001e6a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d07c      	beq.n	8001d4e <HAL_RCC_OscConfig+0x74e>
 8001c54:	2301      	movs	r3, #1
 8001c56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001c66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	4ba2      	ldr	r3, [pc, #648]	; (8001efc <HAL_RCC_OscConfig+0x8fc>)
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fa13 	bl	80010a8 <HAL_GetTick>
 8001c82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c88:	f7ff fa0e 	bl	80010a8 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d902      	bls.n	8001c9e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	f000 bcfe 	b.w	800269a <HAL_RCC_OscConfig+0x109a>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ca8:	fa93 f2a3 	rbit	r2, r3
 8001cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	fa93 f2a3 	rbit	r2, r3
 8001cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cde:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	fa93 f2a3 	rbit	r2, r3
 8001cf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cfc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	4b7e      	ldr	r3, [pc, #504]	; (8001ef8 <HAL_RCC_OscConfig+0x8f8>)
 8001d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	6019      	str	r1, [r3, #0]
 8001d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f1a3 	rbit	r1, r3
 8001d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d20:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d24:	6019      	str	r1, [r3, #0]
  return result;
 8001d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d09d      	beq.n	8001c88 <HAL_RCC_OscConfig+0x688>
 8001d4c:	e08d      	b.n	8001e6a <HAL_RCC_OscConfig+0x86a>
 8001d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d52:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d70:	601a      	str	r2, [r3, #0]
  return result;
 8001d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d76:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d7a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b5d      	ldr	r3, [pc, #372]	; (8001efc <HAL_RCC_OscConfig+0x8fc>)
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7ff f98a 	bl	80010a8 <HAL_GetTick>
 8001d94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d98:	e00a      	b.n	8001db0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9a:	f7ff f985 	bl	80010a8 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d902      	bls.n	8001db0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	f000 bc75 	b.w	800269a <HAL_RCC_OscConfig+0x109a>
 8001db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001db8:	2202      	movs	r2, #2
 8001dba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	fa93 f2a3 	rbit	r2, r3
 8001dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ddc:	2202      	movs	r2, #2
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	fa93 f2a3 	rbit	r2, r3
 8001dee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e00:	2202      	movs	r2, #2
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	fa93 f2a3 	rbit	r2, r3
 8001e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e16:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e1a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <HAL_RCC_OscConfig+0x8f8>)
 8001e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e24:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e28:	2102      	movs	r1, #2
 8001e2a:	6019      	str	r1, [r3, #0]
 8001e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e30:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f1a3 	rbit	r1, r3
 8001e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e42:	6019      	str	r1, [r3, #0]
  return result;
 8001e44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e48:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	2101      	movs	r1, #1
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d197      	bne.n	8001d9a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 81a5 	beq.w	80021ca <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <HAL_RCC_OscConfig+0x8f8>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d116      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <HAL_RCC_OscConfig+0x8f8>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <HAL_RCC_OscConfig+0x8f8>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	61d3      	str	r3, [r2, #28]
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <HAL_RCC_OscConfig+0x8f8>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ea6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <HAL_RCC_OscConfig+0x900>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d121      	bne.n	8001f10 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_RCC_OscConfig+0x900>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x900>)
 8001ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff f8e6 	bl	80010a8 <HAL_GetTick>
 8001edc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	e010      	b.n	8001f04 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee2:	f7ff f8e1 	bl	80010a8 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d908      	bls.n	8001f04 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e3d1      	b.n	800269a <HAL_RCC_OscConfig+0x109a>
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	10908120 	.word	0x10908120
 8001f00:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	4b8d      	ldr	r3, [pc, #564]	; (800213c <HAL_RCC_OscConfig+0xb3c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0e8      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x92e>
 8001f20:	4b87      	ldr	r3, [pc, #540]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4a86      	ldr	r2, [pc, #536]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6213      	str	r3, [r2, #32]
 8001f2c:	e035      	b.n	8001f9a <HAL_RCC_OscConfig+0x99a>
 8001f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x958>
 8001f3e:	4b80      	ldr	r3, [pc, #512]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a7f      	ldr	r2, [pc, #508]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6213      	str	r3, [r2, #32]
 8001f4a:	4b7d      	ldr	r3, [pc, #500]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a7c      	ldr	r2, [pc, #496]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8001f50:	f023 0304 	bic.w	r3, r3, #4
 8001f54:	6213      	str	r3, [r2, #32]
 8001f56:	e020      	b.n	8001f9a <HAL_RCC_OscConfig+0x99a>
 8001f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_OscConfig+0x982>
 8001f68:	4b75      	ldr	r3, [pc, #468]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4a74      	ldr	r2, [pc, #464]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	6213      	str	r3, [r2, #32]
 8001f74:	4b72      	ldr	r3, [pc, #456]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a71      	ldr	r2, [pc, #452]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6213      	str	r3, [r2, #32]
 8001f80:	e00b      	b.n	8001f9a <HAL_RCC_OscConfig+0x99a>
 8001f82:	4b6f      	ldr	r3, [pc, #444]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a6e      	ldr	r2, [pc, #440]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6213      	str	r3, [r2, #32]
 8001f8e:	4b6c      	ldr	r3, [pc, #432]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a6b      	ldr	r2, [pc, #428]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 8081 	beq.w	80020ae <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fac:	f7ff f87c 	bl	80010a8 <HAL_GetTick>
 8001fb0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	e00b      	b.n	8001fce <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7ff f877 	bl	80010a8 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e365      	b.n	800269a <HAL_RCC_OscConfig+0x109a>
 8001fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fde:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	fa93 f2a3 	rbit	r2, r3
 8001fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002002:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	fa93 f2a3 	rbit	r2, r3
 800200c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002010:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002014:	601a      	str	r2, [r3, #0]
  return result;
 8002016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800201a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800201e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	b2db      	uxtb	r3, r3
 800202a:	f043 0302 	orr.w	r3, r3, #2
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d102      	bne.n	800203a <HAL_RCC_OscConfig+0xa3a>
 8002034:	4b42      	ldr	r3, [pc, #264]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	e013      	b.n	8002062 <HAL_RCC_OscConfig+0xa62>
 800203a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002042:	2202      	movs	r2, #2
 8002044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002058:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	4b38      	ldr	r3, [pc, #224]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002066:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800206a:	2102      	movs	r1, #2
 800206c:	6011      	str	r1, [r2, #0]
 800206e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002072:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	fa92 f1a2 	rbit	r1, r2
 800207c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002080:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002084:	6011      	str	r1, [r2, #0]
  return result;
 8002086:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800208a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	fab2 f282 	clz	r2, r2
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f002 021f 	and.w	r2, r2, #31
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f202 	lsl.w	r2, r1, r2
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d084      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x9b6>
 80020ac:	e083      	b.n	80021b6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ae:	f7fe fffb 	bl	80010a8 <HAL_GetTick>
 80020b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b6:	e00b      	b.n	80020d0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7fe fff6 	bl	80010a8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e2e4      	b.n	800269a <HAL_RCC_OscConfig+0x109a>
 80020d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80020d8:	2202      	movs	r2, #2
 80020da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	fa93 f2a3 	rbit	r2, r3
 80020ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020fc:	2202      	movs	r2, #2
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002104:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	fa93 f2a3 	rbit	r2, r3
 800210e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002112:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002116:	601a      	str	r2, [r3, #0]
  return result;
 8002118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002120:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	095b      	lsrs	r3, r3, #5
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d106      	bne.n	8002144 <HAL_RCC_OscConfig+0xb44>
 8002136:	4b02      	ldr	r3, [pc, #8]	; (8002140 <HAL_RCC_OscConfig+0xb40>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	e017      	b.n	800216c <HAL_RCC_OscConfig+0xb6c>
 800213c:	40007000 	.word	0x40007000
 8002140:	40021000 	.word	0x40021000
 8002144:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002148:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800214c:	2202      	movs	r2, #2
 800214e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002154:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	fa93 f2a3 	rbit	r2, r3
 800215e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002162:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	4bb3      	ldr	r3, [pc, #716]	; (8002438 <HAL_RCC_OscConfig+0xe38>)
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002170:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002174:	2102      	movs	r1, #2
 8002176:	6011      	str	r1, [r2, #0]
 8002178:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800217c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	fa92 f1a2 	rbit	r1, r2
 8002186:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800218a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800218e:	6011      	str	r1, [r2, #0]
  return result;
 8002190:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002194:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	fab2 f282 	clz	r2, r2
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	f002 021f 	and.w	r2, r2, #31
 80021aa:	2101      	movs	r1, #1
 80021ac:	fa01 f202 	lsl.w	r2, r1, r2
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d180      	bne.n	80020b8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021b6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d105      	bne.n	80021ca <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021be:	4b9e      	ldr	r3, [pc, #632]	; (8002438 <HAL_RCC_OscConfig+0xe38>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4a9d      	ldr	r2, [pc, #628]	; (8002438 <HAL_RCC_OscConfig+0xe38>)
 80021c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 825e 	beq.w	8002698 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021dc:	4b96      	ldr	r3, [pc, #600]	; (8002438 <HAL_RCC_OscConfig+0xe38>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	f000 821f 	beq.w	8002628 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	f040 8170 	bne.w	80024dc <HAL_RCC_OscConfig+0xedc>
 80021fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002200:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	fa93 f2a3 	rbit	r2, r3
 8002218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002220:	601a      	str	r2, [r3, #0]
  return result;
 8002222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002226:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800222a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002236:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	461a      	mov	r2, r3
 800223e:	2300      	movs	r3, #0
 8002240:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7fe ff31 	bl	80010a8 <HAL_GetTick>
 8002246:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224a:	e009      	b.n	8002260 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224c:	f7fe ff2c 	bl	80010a8 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e21c      	b.n	800269a <HAL_RCC_OscConfig+0x109a>
 8002260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002264:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002268:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002272:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	fa93 f2a3 	rbit	r2, r3
 800227c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002280:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002284:	601a      	str	r2, [r3, #0]
  return result;
 8002286:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800228e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d102      	bne.n	80022aa <HAL_RCC_OscConfig+0xcaa>
 80022a4:	4b64      	ldr	r3, [pc, #400]	; (8002438 <HAL_RCC_OscConfig+0xe38>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	e027      	b.n	80022fa <HAL_RCC_OscConfig+0xcfa>
 80022aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022bc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	fa93 f2a3 	rbit	r2, r3
 80022c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80022d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	4b50      	ldr	r3, [pc, #320]	; (8002438 <HAL_RCC_OscConfig+0xe38>)
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022fe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002302:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002306:	6011      	str	r1, [r2, #0]
 8002308:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800230c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	fa92 f1a2 	rbit	r1, r2
 8002316:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800231a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800231e:	6011      	str	r1, [r2, #0]
  return result;
 8002320:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002324:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	fab2 f282 	clz	r2, r2
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	f042 0220 	orr.w	r2, r2, #32
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	f002 021f 	and.w	r2, r2, #31
 800233a:	2101      	movs	r1, #1
 800233c:	fa01 f202 	lsl.w	r2, r1, r2
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d182      	bne.n	800224c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002346:	4b3c      	ldr	r3, [pc, #240]	; (8002438 <HAL_RCC_OscConfig+0xe38>)
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	f023 020f 	bic.w	r2, r3, #15
 800234e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002352:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	4937      	ldr	r1, [pc, #220]	; (8002438 <HAL_RCC_OscConfig+0xe38>)
 800235c:	4313      	orrs	r3, r2
 800235e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002360:	4b35      	ldr	r3, [pc, #212]	; (8002438 <HAL_RCC_OscConfig+0xe38>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800236c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a19      	ldr	r1, [r3, #32]
 8002374:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002378:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	430b      	orrs	r3, r1
 8002382:	492d      	ldr	r1, [pc, #180]	; (8002438 <HAL_RCC_OscConfig+0xe38>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
 8002388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002390:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023ac:	601a      	str	r2, [r3, #0]
  return result;
 80023ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023b6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	461a      	mov	r2, r3
 80023ca:	2301      	movs	r3, #1
 80023cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7fe fe6b 	bl	80010a8 <HAL_GetTick>
 80023d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d6:	e009      	b.n	80023ec <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d8:	f7fe fe66 	bl	80010a8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e156      	b.n	800269a <HAL_RCC_OscConfig+0x109a>
 80023ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023fe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	fa93 f2a3 	rbit	r2, r3
 8002408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002410:	601a      	str	r2, [r3, #0]
  return result;
 8002412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002416:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800241a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800241c:	fab3 f383 	clz	r3, r3
 8002420:	b2db      	uxtb	r3, r3
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d105      	bne.n	800243c <HAL_RCC_OscConfig+0xe3c>
 8002430:	4b01      	ldr	r3, [pc, #4]	; (8002438 <HAL_RCC_OscConfig+0xe38>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	e02a      	b.n	800248c <HAL_RCC_OscConfig+0xe8c>
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002440:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002444:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	fa93 f2a3 	rbit	r2, r3
 8002458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800245c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002466:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800246a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002474:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	fa93 f2a3 	rbit	r2, r3
 800247e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002482:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	4b86      	ldr	r3, [pc, #536]	; (80026a4 <HAL_RCC_OscConfig+0x10a4>)
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002490:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002494:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002498:	6011      	str	r1, [r2, #0]
 800249a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800249e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	fa92 f1a2 	rbit	r1, r2
 80024a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024ac:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80024b0:	6011      	str	r1, [r2, #0]
  return result;
 80024b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024b6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	fab2 f282 	clz	r2, r2
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	f042 0220 	orr.w	r2, r2, #32
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	f002 021f 	and.w	r2, r2, #31
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f202 	lsl.w	r2, r1, r2
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f43f af7f 	beq.w	80023d8 <HAL_RCC_OscConfig+0xdd8>
 80024da:	e0dd      	b.n	8002698 <HAL_RCC_OscConfig+0x1098>
 80024dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	fa93 f2a3 	rbit	r2, r3
 80024f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024fc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002500:	601a      	str	r2, [r3, #0]
  return result;
 8002502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002506:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800250a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250c:	fab3 f383 	clz	r3, r3
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002516:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	461a      	mov	r2, r3
 800251e:	2300      	movs	r3, #0
 8002520:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7fe fdc1 	bl	80010a8 <HAL_GetTick>
 8002526:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252a:	e009      	b.n	8002540 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fdbc 	bl	80010a8 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e0ac      	b.n	800269a <HAL_RCC_OscConfig+0x109a>
 8002540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002544:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800254c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002552:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	fa93 f2a3 	rbit	r2, r3
 800255c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002560:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002564:	601a      	str	r2, [r3, #0]
  return result;
 8002566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800256e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002570:	fab3 f383 	clz	r3, r3
 8002574:	b2db      	uxtb	r3, r3
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d102      	bne.n	800258a <HAL_RCC_OscConfig+0xf8a>
 8002584:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <HAL_RCC_OscConfig+0x10a4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	e027      	b.n	80025da <HAL_RCC_OscConfig+0xfda>
 800258a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	fa93 f2a3 	rbit	r2, r3
 80025a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025aa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80025b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	fa93 f2a3 	rbit	r2, r3
 80025cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	4b33      	ldr	r3, [pc, #204]	; (80026a4 <HAL_RCC_OscConfig+0x10a4>)
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025de:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025e6:	6011      	str	r1, [r2, #0]
 80025e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025ec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	fa92 f1a2 	rbit	r1, r2
 80025f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025fa:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80025fe:	6011      	str	r1, [r2, #0]
  return result;
 8002600:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002604:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	fab2 f282 	clz	r2, r2
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	f042 0220 	orr.w	r2, r2, #32
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f002 021f 	and.w	r2, r2, #31
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f202 	lsl.w	r2, r1, r2
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d182      	bne.n	800252c <HAL_RCC_OscConfig+0xf2c>
 8002626:	e037      	b.n	8002698 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800262c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e02e      	b.n	800269a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <HAL_RCC_OscConfig+0x10a4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002644:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <HAL_RCC_OscConfig+0x10a4>)
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800264c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002650:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002654:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002658:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	429a      	cmp	r2, r3
 8002662:	d117      	bne.n	8002694 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002664:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002668:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800266c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002670:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002678:	429a      	cmp	r2, r3
 800267a:	d10b      	bne.n	8002694 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800267c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002680:	f003 020f 	and.w	r2, r3, #15
 8002684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002688:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b09e      	sub	sp, #120	; 0x78
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e162      	b.n	8002986 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c0:	4b90      	ldr	r3, [pc, #576]	; (8002904 <HAL_RCC_ClockConfig+0x25c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d910      	bls.n	80026f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b8d      	ldr	r3, [pc, #564]	; (8002904 <HAL_RCC_ClockConfig+0x25c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 0207 	bic.w	r2, r3, #7
 80026d6:	498b      	ldr	r1, [pc, #556]	; (8002904 <HAL_RCC_ClockConfig+0x25c>)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b89      	ldr	r3, [pc, #548]	; (8002904 <HAL_RCC_ClockConfig+0x25c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e14a      	b.n	8002986 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fc:	4b82      	ldr	r3, [pc, #520]	; (8002908 <HAL_RCC_ClockConfig+0x260>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	497f      	ldr	r1, [pc, #508]	; (8002908 <HAL_RCC_ClockConfig+0x260>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80dc 	beq.w	80028d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d13c      	bne.n	800279e <HAL_RCC_ClockConfig+0xf6>
 8002724:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002728:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d102      	bne.n	800274e <HAL_RCC_ClockConfig+0xa6>
 8002748:	4b6f      	ldr	r3, [pc, #444]	; (8002908 <HAL_RCC_ClockConfig+0x260>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	e00f      	b.n	800276e <HAL_RCC_ClockConfig+0xc6>
 800274e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002752:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	667b      	str	r3, [r7, #100]	; 0x64
 800275c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002760:	663b      	str	r3, [r7, #96]	; 0x60
 8002762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	65fb      	str	r3, [r7, #92]	; 0x5c
 800276a:	4b67      	ldr	r3, [pc, #412]	; (8002908 <HAL_RCC_ClockConfig+0x260>)
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002772:	65ba      	str	r2, [r7, #88]	; 0x58
 8002774:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002776:	fa92 f2a2 	rbit	r2, r2
 800277a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800277c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800277e:	fab2 f282 	clz	r2, r2
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f042 0220 	orr.w	r2, r2, #32
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	f002 021f 	and.w	r2, r2, #31
 800278e:	2101      	movs	r1, #1
 8002790:	fa01 f202 	lsl.w	r2, r1, r2
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d17b      	bne.n	8002892 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e0f3      	b.n	8002986 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d13c      	bne.n	8002820 <HAL_RCC_ClockConfig+0x178>
 80027a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d102      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x128>
 80027ca:	4b4f      	ldr	r3, [pc, #316]	; (8002908 <HAL_RCC_ClockConfig+0x260>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	e00f      	b.n	80027f0 <HAL_RCC_ClockConfig+0x148>
 80027d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	647b      	str	r3, [r7, #68]	; 0x44
 80027de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e2:	643b      	str	r3, [r7, #64]	; 0x40
 80027e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ec:	4b46      	ldr	r3, [pc, #280]	; (8002908 <HAL_RCC_ClockConfig+0x260>)
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80027f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027f8:	fa92 f2a2 	rbit	r2, r2
 80027fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80027fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002800:	fab2 f282 	clz	r2, r2
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	f042 0220 	orr.w	r2, r2, #32
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	f002 021f 	and.w	r2, r2, #31
 8002810:	2101      	movs	r1, #1
 8002812:	fa01 f202 	lsl.w	r2, r1, r2
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d13a      	bne.n	8002892 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0b2      	b.n	8002986 <HAL_RCC_ClockConfig+0x2de>
 8002820:	2302      	movs	r3, #2
 8002822:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d102      	bne.n	8002848 <HAL_RCC_ClockConfig+0x1a0>
 8002842:	4b31      	ldr	r3, [pc, #196]	; (8002908 <HAL_RCC_ClockConfig+0x260>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	e00d      	b.n	8002864 <HAL_RCC_ClockConfig+0x1bc>
 8002848:	2302      	movs	r3, #2
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
 8002854:	2302      	movs	r3, #2
 8002856:	623b      	str	r3, [r7, #32]
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	4b29      	ldr	r3, [pc, #164]	; (8002908 <HAL_RCC_ClockConfig+0x260>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	2202      	movs	r2, #2
 8002866:	61ba      	str	r2, [r7, #24]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	fa92 f2a2 	rbit	r2, r2
 800286e:	617a      	str	r2, [r7, #20]
  return result;
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	fab2 f282 	clz	r2, r2
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f042 0220 	orr.w	r2, r2, #32
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f002 021f 	and.w	r2, r2, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e079      	b.n	8002986 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_RCC_ClockConfig+0x260>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f023 0203 	bic.w	r2, r3, #3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	491a      	ldr	r1, [pc, #104]	; (8002908 <HAL_RCC_ClockConfig+0x260>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a4:	f7fe fc00 	bl	80010a8 <HAL_GetTick>
 80028a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ac:	f7fe fbfc 	bl	80010a8 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e061      	b.n	8002986 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <HAL_RCC_ClockConfig+0x260>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 020c 	and.w	r2, r3, #12
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d1eb      	bne.n	80028ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCC_ClockConfig+0x25c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d214      	bcs.n	800290c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <HAL_RCC_ClockConfig+0x25c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 0207 	bic.w	r2, r3, #7
 80028ea:	4906      	ldr	r1, [pc, #24]	; (8002904 <HAL_RCC_ClockConfig+0x25c>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b04      	ldr	r3, [pc, #16]	; (8002904 <HAL_RCC_ClockConfig+0x25c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d005      	beq.n	800290c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e040      	b.n	8002986 <HAL_RCC_ClockConfig+0x2de>
 8002904:	40022000 	.word	0x40022000
 8002908:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002918:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_RCC_ClockConfig+0x2e8>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	491a      	ldr	r1, [pc, #104]	; (8002990 <HAL_RCC_ClockConfig+0x2e8>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <HAL_RCC_ClockConfig+0x2e8>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4912      	ldr	r1, [pc, #72]	; (8002990 <HAL_RCC_ClockConfig+0x2e8>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800294a:	f000 f829 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 800294e:	4601      	mov	r1, r0
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <HAL_RCC_ClockConfig+0x2e8>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002958:	22f0      	movs	r2, #240	; 0xf0
 800295a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	fa92 f2a2 	rbit	r2, r2
 8002962:	60fa      	str	r2, [r7, #12]
  return result;
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	fab2 f282 	clz	r2, r2
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	40d3      	lsrs	r3, r2
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <HAL_RCC_ClockConfig+0x2ec>)
 8002970:	5cd3      	ldrb	r3, [r2, r3]
 8002972:	fa21 f303 	lsr.w	r3, r1, r3
 8002976:	4a08      	ldr	r2, [pc, #32]	; (8002998 <HAL_RCC_ClockConfig+0x2f0>)
 8002978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <HAL_RCC_ClockConfig+0x2f4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fb4e 	bl	8001020 <HAL_InitTick>
  
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3778      	adds	r7, #120	; 0x78
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	0800488c 	.word	0x0800488c
 8002998:	20000000 	.word	0x20000000
 800299c:	20000004 	.word	0x20000004

080029a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b08b      	sub	sp, #44	; 0x2c
 80029a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	2300      	movs	r3, #0
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029ba:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d002      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x30>
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_GetSysClockFreq+0x36>
 80029ce:	e03f      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029d0:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029d2:	623b      	str	r3, [r7, #32]
      break;
 80029d4:	e03f      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80029e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	fa92 f2a2 	rbit	r2, r2
 80029e8:	607a      	str	r2, [r7, #4]
  return result;
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	fab2 f282 	clz	r2, r2
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	40d3      	lsrs	r3, r2
 80029f4:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xcc>)
 80029f6:	5cd3      	ldrb	r3, [r2, r3]
 80029f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	220f      	movs	r2, #15
 8002a04:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	fa92 f2a2 	rbit	r2, r2
 8002a0c:	60fa      	str	r2, [r7, #12]
  return result;
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	fab2 f282 	clz	r2, r2
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	40d3      	lsrs	r3, r2
 8002a18:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a1a:	5cd3      	ldrb	r3, [r2, r3]
 8002a1c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a28:	4a0f      	ldr	r2, [pc, #60]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
 8002a38:	e007      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a3a:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	fb02 f303 	mul.w	r3, r2, r3
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	623b      	str	r3, [r7, #32]
      break;
 8002a4e:	e002      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a52:	623b      	str	r3, [r7, #32]
      break;
 8002a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a56:	6a3b      	ldr	r3, [r7, #32]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	372c      	adds	r7, #44	; 0x2c
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40021000 	.word	0x40021000
 8002a68:	007a1200 	.word	0x007a1200
 8002a6c:	080048a4 	.word	0x080048a4
 8002a70:	080048b4 	.word	0x080048b4

08002a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000000 	.word	0x20000000

08002a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a92:	f7ff ffef 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002a96:	4601      	mov	r1, r0
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002aa0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002aa4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	fa92 f2a2 	rbit	r2, r2
 8002aac:	603a      	str	r2, [r7, #0]
  return result;
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	fab2 f282 	clz	r2, r2
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	40d3      	lsrs	r3, r2
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002aba:	5cd3      	ldrb	r3, [r2, r3]
 8002abc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	0800489c 	.word	0x0800489c

08002ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ad6:	f7ff ffcd 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002ada:	4601      	mov	r1, r0
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002ae4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ae8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	fa92 f2a2 	rbit	r2, r2
 8002af0:	603a      	str	r2, [r7, #0]
  return result;
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	fab2 f282 	clz	r2, r2
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	40d3      	lsrs	r3, r2
 8002afc:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002afe:	5cd3      	ldrb	r3, [r2, r3]
 8002b00:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	0800489c 	.word	0x0800489c

08002b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b092      	sub	sp, #72	; 0x48
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80d4 	beq.w	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b38:	4b4e      	ldr	r3, [pc, #312]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10e      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b44:	4b4b      	ldr	r3, [pc, #300]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	4a4a      	ldr	r2, [pc, #296]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	61d3      	str	r3, [r2, #28]
 8002b50:	4b48      	ldr	r3, [pc, #288]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b62:	4b45      	ldr	r3, [pc, #276]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d118      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6e:	4b42      	ldr	r3, [pc, #264]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a41      	ldr	r2, [pc, #260]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b7a:	f7fe fa95 	bl	80010a8 <HAL_GetTick>
 8002b7e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b80:	e008      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b82:	f7fe fa91 	bl	80010a8 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b64      	cmp	r3, #100	; 0x64
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e1d6      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b94:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ba0:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8084 	beq.w	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d07c      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bc0:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	461a      	mov	r2, r3
 8002bea:	2301      	movs	r3, #1
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2300      	movs	r3, #0
 8002c10:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c12:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c16:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d04b      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7fe fa41 	bl	80010a8 <HAL_GetTick>
 8002c26:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fe fa3d 	bl	80010a8 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e180      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002c40:	2302      	movs	r3, #2
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	623b      	str	r3, [r7, #32]
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	61fb      	str	r3, [r7, #28]
  return result;
 8002c58:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d108      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c6e:	4b01      	ldr	r3, [pc, #4]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	e00d      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	10908100 	.word	0x10908100
 8002c80:	2302      	movs	r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	4b9a      	ldr	r3, [pc, #616]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	2202      	movs	r2, #2
 8002c92:	613a      	str	r2, [r7, #16]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	fa92 f2a2 	rbit	r2, r2
 8002c9a:	60fa      	str	r2, [r7, #12]
  return result;
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	fab2 f282 	clz	r2, r2
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	f002 021f 	and.w	r2, r2, #31
 8002cae:	2101      	movs	r1, #1
 8002cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0b7      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002cba:	4b8f      	ldr	r3, [pc, #572]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	498c      	ldr	r1, [pc, #560]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ccc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d105      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd4:	4b88      	ldr	r3, [pc, #544]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	4a87      	ldr	r2, [pc, #540]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cec:	4b82      	ldr	r3, [pc, #520]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f023 0203 	bic.w	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	497f      	ldr	r1, [pc, #508]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d0a:	4b7b      	ldr	r3, [pc, #492]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4978      	ldr	r1, [pc, #480]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d28:	4b73      	ldr	r3, [pc, #460]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	4970      	ldr	r1, [pc, #448]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d46:	4b6c      	ldr	r3, [pc, #432]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f023 0210 	bic.w	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4969      	ldr	r1, [pc, #420]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d64:	4b64      	ldr	r3, [pc, #400]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d70:	4961      	ldr	r1, [pc, #388]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d82:	4b5d      	ldr	r3, [pc, #372]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f023 0220 	bic.w	r2, r3, #32
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	495a      	ldr	r1, [pc, #360]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002da0:	4b55      	ldr	r3, [pc, #340]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	4952      	ldr	r1, [pc, #328]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dbe:	4b4e      	ldr	r3, [pc, #312]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	494b      	ldr	r1, [pc, #300]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ddc:	4b46      	ldr	r3, [pc, #280]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	4943      	ldr	r1, [pc, #268]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dfa:	4b3f      	ldr	r3, [pc, #252]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	493c      	ldr	r1, [pc, #240]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e18:	4b37      	ldr	r3, [pc, #220]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	4934      	ldr	r1, [pc, #208]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e36:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e42:	492d      	ldr	r1, [pc, #180]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e54:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e60:	4925      	ldr	r1, [pc, #148]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002e72:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	491e      	ldr	r1, [pc, #120]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	4916      	ldr	r1, [pc, #88]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002eae:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eba:	490f      	ldr	r1, [pc, #60]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	4907      	ldr	r1, [pc, #28]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00c      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002eea:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	e002      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efe:	4913      	ldr	r1, [pc, #76]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1c:	490b      	ldr	r1, [pc, #44]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3a:	4904      	ldr	r1, [pc, #16]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3748      	adds	r7, #72	; 0x48
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000

08002f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e049      	b.n	8002ff6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fd ff0a 	bl	8000d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	f000 fb80 	bl	8003694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e049      	b.n	80030a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f841 	bl	80030ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3304      	adds	r3, #4
 800303a:	4619      	mov	r1, r3
 800303c:	4610      	mov	r0, r2
 800303e:	f000 fb29 	bl	8003694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d109      	bne.n	80030e4 <HAL_TIM_PWM_Start+0x24>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	bf14      	ite	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	2300      	moveq	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e03c      	b.n	800315e <HAL_TIM_PWM_Start+0x9e>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d109      	bne.n	80030fe <HAL_TIM_PWM_Start+0x3e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	bf14      	ite	ne
 80030f6:	2301      	movne	r3, #1
 80030f8:	2300      	moveq	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	e02f      	b.n	800315e <HAL_TIM_PWM_Start+0x9e>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b08      	cmp	r3, #8
 8003102:	d109      	bne.n	8003118 <HAL_TIM_PWM_Start+0x58>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e022      	b.n	800315e <HAL_TIM_PWM_Start+0x9e>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b0c      	cmp	r3, #12
 800311c:	d109      	bne.n	8003132 <HAL_TIM_PWM_Start+0x72>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	bf14      	ite	ne
 800312a:	2301      	movne	r3, #1
 800312c:	2300      	moveq	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e015      	b.n	800315e <HAL_TIM_PWM_Start+0x9e>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b10      	cmp	r3, #16
 8003136:	d109      	bne.n	800314c <HAL_TIM_PWM_Start+0x8c>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e008      	b.n	800315e <HAL_TIM_PWM_Start+0x9e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0a1      	b.n	80032aa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <HAL_TIM_PWM_Start+0xb6>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003174:	e023      	b.n	80031be <HAL_TIM_PWM_Start+0xfe>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d104      	bne.n	8003186 <HAL_TIM_PWM_Start+0xc6>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003184:	e01b      	b.n	80031be <HAL_TIM_PWM_Start+0xfe>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d104      	bne.n	8003196 <HAL_TIM_PWM_Start+0xd6>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003194:	e013      	b.n	80031be <HAL_TIM_PWM_Start+0xfe>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b0c      	cmp	r3, #12
 800319a:	d104      	bne.n	80031a6 <HAL_TIM_PWM_Start+0xe6>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031a4:	e00b      	b.n	80031be <HAL_TIM_PWM_Start+0xfe>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d104      	bne.n	80031b6 <HAL_TIM_PWM_Start+0xf6>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b4:	e003      	b.n	80031be <HAL_TIM_PWM_Start+0xfe>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2201      	movs	r2, #1
 80031c4:	6839      	ldr	r1, [r7, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fea2 	bl	8003f10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a38      	ldr	r2, [pc, #224]	; (80032b4 <HAL_TIM_PWM_Start+0x1f4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d018      	beq.n	8003208 <HAL_TIM_PWM_Start+0x148>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a37      	ldr	r2, [pc, #220]	; (80032b8 <HAL_TIM_PWM_Start+0x1f8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d013      	beq.n	8003208 <HAL_TIM_PWM_Start+0x148>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a35      	ldr	r2, [pc, #212]	; (80032bc <HAL_TIM_PWM_Start+0x1fc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00e      	beq.n	8003208 <HAL_TIM_PWM_Start+0x148>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a34      	ldr	r2, [pc, #208]	; (80032c0 <HAL_TIM_PWM_Start+0x200>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d009      	beq.n	8003208 <HAL_TIM_PWM_Start+0x148>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a32      	ldr	r2, [pc, #200]	; (80032c4 <HAL_TIM_PWM_Start+0x204>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d004      	beq.n	8003208 <HAL_TIM_PWM_Start+0x148>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a31      	ldr	r2, [pc, #196]	; (80032c8 <HAL_TIM_PWM_Start+0x208>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d101      	bne.n	800320c <HAL_TIM_PWM_Start+0x14c>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_TIM_PWM_Start+0x14e>
 800320c:	2300      	movs	r3, #0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a23      	ldr	r2, [pc, #140]	; (80032b4 <HAL_TIM_PWM_Start+0x1f4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d01d      	beq.n	8003268 <HAL_TIM_PWM_Start+0x1a8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003234:	d018      	beq.n	8003268 <HAL_TIM_PWM_Start+0x1a8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a24      	ldr	r2, [pc, #144]	; (80032cc <HAL_TIM_PWM_Start+0x20c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d013      	beq.n	8003268 <HAL_TIM_PWM_Start+0x1a8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a22      	ldr	r2, [pc, #136]	; (80032d0 <HAL_TIM_PWM_Start+0x210>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00e      	beq.n	8003268 <HAL_TIM_PWM_Start+0x1a8>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1a      	ldr	r2, [pc, #104]	; (80032b8 <HAL_TIM_PWM_Start+0x1f8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d009      	beq.n	8003268 <HAL_TIM_PWM_Start+0x1a8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a18      	ldr	r2, [pc, #96]	; (80032bc <HAL_TIM_PWM_Start+0x1fc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d004      	beq.n	8003268 <HAL_TIM_PWM_Start+0x1a8>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a19      	ldr	r2, [pc, #100]	; (80032c8 <HAL_TIM_PWM_Start+0x208>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d115      	bne.n	8003294 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <HAL_TIM_PWM_Start+0x214>)
 8003270:	4013      	ands	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b06      	cmp	r3, #6
 8003278:	d015      	beq.n	80032a6 <HAL_TIM_PWM_Start+0x1e6>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003280:	d011      	beq.n	80032a6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0201 	orr.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003292:	e008      	b.n	80032a6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e000      	b.n	80032a8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40013400 	.word	0x40013400
 80032bc:	40014000 	.word	0x40014000
 80032c0:	40014400 	.word	0x40014400
 80032c4:	40014800 	.word	0x40014800
 80032c8:	40015000 	.word	0x40015000
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800
 80032d4:	00010007 	.word	0x00010007

080032d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e0ff      	b.n	80034f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b14      	cmp	r3, #20
 8003302:	f200 80f0 	bhi.w	80034e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003306:	a201      	add	r2, pc, #4	; (adr r2, 800330c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330c:	08003361 	.word	0x08003361
 8003310:	080034e7 	.word	0x080034e7
 8003314:	080034e7 	.word	0x080034e7
 8003318:	080034e7 	.word	0x080034e7
 800331c:	080033a1 	.word	0x080033a1
 8003320:	080034e7 	.word	0x080034e7
 8003324:	080034e7 	.word	0x080034e7
 8003328:	080034e7 	.word	0x080034e7
 800332c:	080033e3 	.word	0x080033e3
 8003330:	080034e7 	.word	0x080034e7
 8003334:	080034e7 	.word	0x080034e7
 8003338:	080034e7 	.word	0x080034e7
 800333c:	08003423 	.word	0x08003423
 8003340:	080034e7 	.word	0x080034e7
 8003344:	080034e7 	.word	0x080034e7
 8003348:	080034e7 	.word	0x080034e7
 800334c:	08003465 	.word	0x08003465
 8003350:	080034e7 	.word	0x080034e7
 8003354:	080034e7 	.word	0x080034e7
 8003358:	080034e7 	.word	0x080034e7
 800335c:	080034a5 	.word	0x080034a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fa32 	bl	80037d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0208 	orr.w	r2, r2, #8
 800337a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0204 	bic.w	r2, r2, #4
 800338a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6999      	ldr	r1, [r3, #24]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	619a      	str	r2, [r3, #24]
      break;
 800339e:	e0a5      	b.n	80034ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 faac 	bl	8003904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6999      	ldr	r1, [r3, #24]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	021a      	lsls	r2, r3, #8
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	619a      	str	r2, [r3, #24]
      break;
 80033e0:	e084      	b.n	80034ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fb1f 	bl	8003a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0208 	orr.w	r2, r2, #8
 80033fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0204 	bic.w	r2, r2, #4
 800340c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69d9      	ldr	r1, [r3, #28]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	61da      	str	r2, [r3, #28]
      break;
 8003420:	e064      	b.n	80034ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fb91 	bl	8003b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800343c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69d9      	ldr	r1, [r3, #28]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	021a      	lsls	r2, r3, #8
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	61da      	str	r2, [r3, #28]
      break;
 8003462:	e043      	b.n	80034ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fbe0 	bl	8003c30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0208 	orr.w	r2, r2, #8
 800347e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0204 	bic.w	r2, r2, #4
 800348e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034a2:	e023      	b.n	80034ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fc2a 	bl	8003d04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	021a      	lsls	r2, r3, #8
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034e4:	e002      	b.n	80034ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	75fb      	strb	r3, [r7, #23]
      break;
 80034ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop

08003500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_TIM_ConfigClockSource+0x1c>
 8003518:	2302      	movs	r3, #2
 800351a:	e0b6      	b.n	800368a <HAL_TIM_ConfigClockSource+0x18a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800353e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003558:	d03e      	beq.n	80035d8 <HAL_TIM_ConfigClockSource+0xd8>
 800355a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355e:	f200 8087 	bhi.w	8003670 <HAL_TIM_ConfigClockSource+0x170>
 8003562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003566:	f000 8086 	beq.w	8003676 <HAL_TIM_ConfigClockSource+0x176>
 800356a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356e:	d87f      	bhi.n	8003670 <HAL_TIM_ConfigClockSource+0x170>
 8003570:	2b70      	cmp	r3, #112	; 0x70
 8003572:	d01a      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0xaa>
 8003574:	2b70      	cmp	r3, #112	; 0x70
 8003576:	d87b      	bhi.n	8003670 <HAL_TIM_ConfigClockSource+0x170>
 8003578:	2b60      	cmp	r3, #96	; 0x60
 800357a:	d050      	beq.n	800361e <HAL_TIM_ConfigClockSource+0x11e>
 800357c:	2b60      	cmp	r3, #96	; 0x60
 800357e:	d877      	bhi.n	8003670 <HAL_TIM_ConfigClockSource+0x170>
 8003580:	2b50      	cmp	r3, #80	; 0x50
 8003582:	d03c      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0xfe>
 8003584:	2b50      	cmp	r3, #80	; 0x50
 8003586:	d873      	bhi.n	8003670 <HAL_TIM_ConfigClockSource+0x170>
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d058      	beq.n	800363e <HAL_TIM_ConfigClockSource+0x13e>
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d86f      	bhi.n	8003670 <HAL_TIM_ConfigClockSource+0x170>
 8003590:	2b30      	cmp	r3, #48	; 0x30
 8003592:	d064      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x15e>
 8003594:	2b30      	cmp	r3, #48	; 0x30
 8003596:	d86b      	bhi.n	8003670 <HAL_TIM_ConfigClockSource+0x170>
 8003598:	2b20      	cmp	r3, #32
 800359a:	d060      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x15e>
 800359c:	2b20      	cmp	r3, #32
 800359e:	d867      	bhi.n	8003670 <HAL_TIM_ConfigClockSource+0x170>
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d05c      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x15e>
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d05a      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x15e>
 80035a8:	e062      	b.n	8003670 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	6899      	ldr	r1, [r3, #8]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f000 fc89 	bl	8003ed0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	609a      	str	r2, [r3, #8]
      break;
 80035d6:	e04f      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	6899      	ldr	r1, [r3, #8]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f000 fc72 	bl	8003ed0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035fa:	609a      	str	r2, [r3, #8]
      break;
 80035fc:	e03c      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6859      	ldr	r1, [r3, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	461a      	mov	r2, r3
 800360c:	f000 fbe6 	bl	8003ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2150      	movs	r1, #80	; 0x50
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fc3f 	bl	8003e9a <TIM_ITRx_SetConfig>
      break;
 800361c:	e02c      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	6859      	ldr	r1, [r3, #4]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	461a      	mov	r2, r3
 800362c:	f000 fc05 	bl	8003e3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2160      	movs	r1, #96	; 0x60
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fc2f 	bl	8003e9a <TIM_ITRx_SetConfig>
      break;
 800363c:	e01c      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6859      	ldr	r1, [r3, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	461a      	mov	r2, r3
 800364c:	f000 fbc6 	bl	8003ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2140      	movs	r1, #64	; 0x40
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fc1f 	bl	8003e9a <TIM_ITRx_SetConfig>
      break;
 800365c:	e00c      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f000 fc16 	bl	8003e9a <TIM_ITRx_SetConfig>
      break;
 800366e:	e003      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      break;
 8003674:	e000      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003676:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003688:	7bfb      	ldrb	r3, [r7, #15]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a42      	ldr	r2, [pc, #264]	; (80037b0 <TIM_Base_SetConfig+0x11c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d013      	beq.n	80036d4 <TIM_Base_SetConfig+0x40>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b2:	d00f      	beq.n	80036d4 <TIM_Base_SetConfig+0x40>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a3f      	ldr	r2, [pc, #252]	; (80037b4 <TIM_Base_SetConfig+0x120>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00b      	beq.n	80036d4 <TIM_Base_SetConfig+0x40>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a3e      	ldr	r2, [pc, #248]	; (80037b8 <TIM_Base_SetConfig+0x124>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <TIM_Base_SetConfig+0x40>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a3d      	ldr	r2, [pc, #244]	; (80037bc <TIM_Base_SetConfig+0x128>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_Base_SetConfig+0x40>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a3c      	ldr	r2, [pc, #240]	; (80037c0 <TIM_Base_SetConfig+0x12c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d108      	bne.n	80036e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a31      	ldr	r2, [pc, #196]	; (80037b0 <TIM_Base_SetConfig+0x11c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d01f      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f4:	d01b      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a2e      	ldr	r2, [pc, #184]	; (80037b4 <TIM_Base_SetConfig+0x120>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d017      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a2d      	ldr	r2, [pc, #180]	; (80037b8 <TIM_Base_SetConfig+0x124>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a2c      	ldr	r2, [pc, #176]	; (80037bc <TIM_Base_SetConfig+0x128>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00f      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a2c      	ldr	r2, [pc, #176]	; (80037c4 <TIM_Base_SetConfig+0x130>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00b      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a2b      	ldr	r2, [pc, #172]	; (80037c8 <TIM_Base_SetConfig+0x134>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a2a      	ldr	r2, [pc, #168]	; (80037cc <TIM_Base_SetConfig+0x138>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a25      	ldr	r2, [pc, #148]	; (80037c0 <TIM_Base_SetConfig+0x12c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d108      	bne.n	8003740 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a12      	ldr	r2, [pc, #72]	; (80037b0 <TIM_Base_SetConfig+0x11c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d013      	beq.n	8003794 <TIM_Base_SetConfig+0x100>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a13      	ldr	r2, [pc, #76]	; (80037bc <TIM_Base_SetConfig+0x128>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00f      	beq.n	8003794 <TIM_Base_SetConfig+0x100>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a13      	ldr	r2, [pc, #76]	; (80037c4 <TIM_Base_SetConfig+0x130>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00b      	beq.n	8003794 <TIM_Base_SetConfig+0x100>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <TIM_Base_SetConfig+0x134>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d007      	beq.n	8003794 <TIM_Base_SetConfig+0x100>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a11      	ldr	r2, [pc, #68]	; (80037cc <TIM_Base_SetConfig+0x138>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_Base_SetConfig+0x100>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a0c      	ldr	r2, [pc, #48]	; (80037c0 <TIM_Base_SetConfig+0x12c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d103      	bne.n	800379c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	615a      	str	r2, [r3, #20]
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40012c00 	.word	0x40012c00
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40000800 	.word	0x40000800
 80037bc:	40013400 	.word	0x40013400
 80037c0:	40015000 	.word	0x40015000
 80037c4:	40014000 	.word	0x40014000
 80037c8:	40014400 	.word	0x40014400
 80037cc:	40014800 	.word	0x40014800

080037d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f023 0201 	bic.w	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0303 	bic.w	r3, r3, #3
 800380a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f023 0302 	bic.w	r3, r3, #2
 800381c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a30      	ldr	r2, [pc, #192]	; (80038ec <TIM_OC1_SetConfig+0x11c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d013      	beq.n	8003858 <TIM_OC1_SetConfig+0x88>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a2f      	ldr	r2, [pc, #188]	; (80038f0 <TIM_OC1_SetConfig+0x120>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00f      	beq.n	8003858 <TIM_OC1_SetConfig+0x88>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a2e      	ldr	r2, [pc, #184]	; (80038f4 <TIM_OC1_SetConfig+0x124>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00b      	beq.n	8003858 <TIM_OC1_SetConfig+0x88>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a2d      	ldr	r2, [pc, #180]	; (80038f8 <TIM_OC1_SetConfig+0x128>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d007      	beq.n	8003858 <TIM_OC1_SetConfig+0x88>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a2c      	ldr	r2, [pc, #176]	; (80038fc <TIM_OC1_SetConfig+0x12c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_OC1_SetConfig+0x88>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a2b      	ldr	r2, [pc, #172]	; (8003900 <TIM_OC1_SetConfig+0x130>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d10c      	bne.n	8003872 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 0308 	bic.w	r3, r3, #8
 800385e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f023 0304 	bic.w	r3, r3, #4
 8003870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <TIM_OC1_SetConfig+0x11c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <TIM_OC1_SetConfig+0xd2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <TIM_OC1_SetConfig+0x120>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00f      	beq.n	80038a2 <TIM_OC1_SetConfig+0xd2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <TIM_OC1_SetConfig+0x124>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00b      	beq.n	80038a2 <TIM_OC1_SetConfig+0xd2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1a      	ldr	r2, [pc, #104]	; (80038f8 <TIM_OC1_SetConfig+0x128>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d007      	beq.n	80038a2 <TIM_OC1_SetConfig+0xd2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a19      	ldr	r2, [pc, #100]	; (80038fc <TIM_OC1_SetConfig+0x12c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d003      	beq.n	80038a2 <TIM_OC1_SetConfig+0xd2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a18      	ldr	r2, [pc, #96]	; (8003900 <TIM_OC1_SetConfig+0x130>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d111      	bne.n	80038c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	621a      	str	r2, [r3, #32]
}
 80038e0:	bf00      	nop
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	40012c00 	.word	0x40012c00
 80038f0:	40013400 	.word	0x40013400
 80038f4:	40014000 	.word	0x40014000
 80038f8:	40014400 	.word	0x40014400
 80038fc:	40014800 	.word	0x40014800
 8003900:	40015000 	.word	0x40015000

08003904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f023 0210 	bic.w	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f023 0320 	bic.w	r3, r3, #32
 8003952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a2c      	ldr	r2, [pc, #176]	; (8003a14 <TIM_OC2_SetConfig+0x110>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d007      	beq.n	8003978 <TIM_OC2_SetConfig+0x74>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a2b      	ldr	r2, [pc, #172]	; (8003a18 <TIM_OC2_SetConfig+0x114>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d003      	beq.n	8003978 <TIM_OC2_SetConfig+0x74>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a2a      	ldr	r2, [pc, #168]	; (8003a1c <TIM_OC2_SetConfig+0x118>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d10d      	bne.n	8003994 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800397e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4313      	orrs	r3, r2
 800398a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003992:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a1f      	ldr	r2, [pc, #124]	; (8003a14 <TIM_OC2_SetConfig+0x110>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d013      	beq.n	80039c4 <TIM_OC2_SetConfig+0xc0>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a1e      	ldr	r2, [pc, #120]	; (8003a18 <TIM_OC2_SetConfig+0x114>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00f      	beq.n	80039c4 <TIM_OC2_SetConfig+0xc0>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <TIM_OC2_SetConfig+0x11c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00b      	beq.n	80039c4 <TIM_OC2_SetConfig+0xc0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <TIM_OC2_SetConfig+0x120>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d007      	beq.n	80039c4 <TIM_OC2_SetConfig+0xc0>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <TIM_OC2_SetConfig+0x124>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <TIM_OC2_SetConfig+0xc0>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a17      	ldr	r2, [pc, #92]	; (8003a1c <TIM_OC2_SetConfig+0x118>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d113      	bne.n	80039ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	621a      	str	r2, [r3, #32]
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40013400 	.word	0x40013400
 8003a1c:	40015000 	.word	0x40015000
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40014400 	.word	0x40014400
 8003a28:	40014800 	.word	0x40014800

08003a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a2b      	ldr	r2, [pc, #172]	; (8003b38 <TIM_OC3_SetConfig+0x10c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d007      	beq.n	8003a9e <TIM_OC3_SetConfig+0x72>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2a      	ldr	r2, [pc, #168]	; (8003b3c <TIM_OC3_SetConfig+0x110>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <TIM_OC3_SetConfig+0x72>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a29      	ldr	r2, [pc, #164]	; (8003b40 <TIM_OC3_SetConfig+0x114>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d10d      	bne.n	8003aba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ab8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a1e      	ldr	r2, [pc, #120]	; (8003b38 <TIM_OC3_SetConfig+0x10c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <TIM_OC3_SetConfig+0xbe>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1d      	ldr	r2, [pc, #116]	; (8003b3c <TIM_OC3_SetConfig+0x110>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00f      	beq.n	8003aea <TIM_OC3_SetConfig+0xbe>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <TIM_OC3_SetConfig+0x118>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <TIM_OC3_SetConfig+0xbe>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a1c      	ldr	r2, [pc, #112]	; (8003b48 <TIM_OC3_SetConfig+0x11c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <TIM_OC3_SetConfig+0xbe>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a1b      	ldr	r2, [pc, #108]	; (8003b4c <TIM_OC3_SetConfig+0x120>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_OC3_SetConfig+0xbe>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a16      	ldr	r2, [pc, #88]	; (8003b40 <TIM_OC3_SetConfig+0x114>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d113      	bne.n	8003b12 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	621a      	str	r2, [r3, #32]
}
 8003b2c:	bf00      	nop
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40013400 	.word	0x40013400
 8003b40:	40015000 	.word	0x40015000
 8003b44:	40014000 	.word	0x40014000
 8003b48:	40014400 	.word	0x40014400
 8003b4c:	40014800 	.word	0x40014800

08003b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	031b      	lsls	r3, r3, #12
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a1a      	ldr	r2, [pc, #104]	; (8003c18 <TIM_OC4_SetConfig+0xc8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d013      	beq.n	8003bdc <TIM_OC4_SetConfig+0x8c>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a19      	ldr	r2, [pc, #100]	; (8003c1c <TIM_OC4_SetConfig+0xcc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00f      	beq.n	8003bdc <TIM_OC4_SetConfig+0x8c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a18      	ldr	r2, [pc, #96]	; (8003c20 <TIM_OC4_SetConfig+0xd0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00b      	beq.n	8003bdc <TIM_OC4_SetConfig+0x8c>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <TIM_OC4_SetConfig+0xd4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d007      	beq.n	8003bdc <TIM_OC4_SetConfig+0x8c>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a16      	ldr	r2, [pc, #88]	; (8003c28 <TIM_OC4_SetConfig+0xd8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d003      	beq.n	8003bdc <TIM_OC4_SetConfig+0x8c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <TIM_OC4_SetConfig+0xdc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d109      	bne.n	8003bf0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	019b      	lsls	r3, r3, #6
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	621a      	str	r2, [r3, #32]
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40013400 	.word	0x40013400
 8003c20:	40014000 	.word	0x40014000
 8003c24:	40014400 	.word	0x40014400
 8003c28:	40014800 	.word	0x40014800
 8003c2c:	40015000 	.word	0x40015000

08003c30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	041b      	lsls	r3, r3, #16
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a19      	ldr	r2, [pc, #100]	; (8003cec <TIM_OC5_SetConfig+0xbc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <TIM_OC5_SetConfig+0x82>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a18      	ldr	r2, [pc, #96]	; (8003cf0 <TIM_OC5_SetConfig+0xc0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00f      	beq.n	8003cb2 <TIM_OC5_SetConfig+0x82>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a17      	ldr	r2, [pc, #92]	; (8003cf4 <TIM_OC5_SetConfig+0xc4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00b      	beq.n	8003cb2 <TIM_OC5_SetConfig+0x82>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a16      	ldr	r2, [pc, #88]	; (8003cf8 <TIM_OC5_SetConfig+0xc8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <TIM_OC5_SetConfig+0x82>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a15      	ldr	r2, [pc, #84]	; (8003cfc <TIM_OC5_SetConfig+0xcc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_OC5_SetConfig+0x82>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a14      	ldr	r2, [pc, #80]	; (8003d00 <TIM_OC5_SetConfig+0xd0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d109      	bne.n	8003cc6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	621a      	str	r2, [r3, #32]
}
 8003ce0:	bf00      	nop
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40013400 	.word	0x40013400
 8003cf4:	40014000 	.word	0x40014000
 8003cf8:	40014400 	.word	0x40014400
 8003cfc:	40014800 	.word	0x40014800
 8003d00:	40015000 	.word	0x40015000

08003d04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	051b      	lsls	r3, r3, #20
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a1a      	ldr	r2, [pc, #104]	; (8003dc4 <TIM_OC6_SetConfig+0xc0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d013      	beq.n	8003d88 <TIM_OC6_SetConfig+0x84>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <TIM_OC6_SetConfig+0xc4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00f      	beq.n	8003d88 <TIM_OC6_SetConfig+0x84>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <TIM_OC6_SetConfig+0xc8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00b      	beq.n	8003d88 <TIM_OC6_SetConfig+0x84>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a17      	ldr	r2, [pc, #92]	; (8003dd0 <TIM_OC6_SetConfig+0xcc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d007      	beq.n	8003d88 <TIM_OC6_SetConfig+0x84>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a16      	ldr	r2, [pc, #88]	; (8003dd4 <TIM_OC6_SetConfig+0xd0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_OC6_SetConfig+0x84>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <TIM_OC6_SetConfig+0xd4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d109      	bne.n	8003d9c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	029b      	lsls	r3, r3, #10
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	621a      	str	r2, [r3, #32]
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40013400 	.word	0x40013400
 8003dcc:	40014000 	.word	0x40014000
 8003dd0:	40014400 	.word	0x40014400
 8003dd4:	40014800 	.word	0x40014800
 8003dd8:	40015000 	.word	0x40015000

08003ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f023 0201 	bic.w	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f023 030a 	bic.w	r3, r3, #10
 8003e18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b087      	sub	sp, #28
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f023 0210 	bic.w	r2, r3, #16
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	031b      	lsls	r3, r3, #12
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f043 0307 	orr.w	r3, r3, #7
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	609a      	str	r2, [r3, #8]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	021a      	lsls	r2, r3, #8
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	609a      	str	r2, [r3, #8]
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	2201      	movs	r2, #1
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1a      	ldr	r2, [r3, #32]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	43db      	mvns	r3, r3
 8003f32:	401a      	ands	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a1a      	ldr	r2, [r3, #32]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e06d      	b.n	8004050 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a30      	ldr	r2, [pc, #192]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d009      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a2f      	ldr	r2, [pc, #188]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a2d      	ldr	r2, [pc, #180]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d108      	bne.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003fb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1e      	ldr	r2, [pc, #120]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d01d      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff0:	d018      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1a      	ldr	r2, [pc, #104]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00e      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a15      	ldr	r2, [pc, #84]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d009      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a16      	ldr	r2, [pc, #88]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d004      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a11      	ldr	r2, [pc, #68]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d10c      	bne.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800402a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	4313      	orrs	r3, r2
 8004034:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	40012c00 	.word	0x40012c00
 8004060:	40013400 	.word	0x40013400
 8004064:	40015000 	.word	0x40015000
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800
 8004070:	40014000 	.word	0x40014000

08004074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e040      	b.n	8004108 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fc ff04 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2224      	movs	r2, #36	; 0x24
 80040a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0201 	bic.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f82c 	bl	8004110 <UART_SetConfig>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e022      	b.n	8004108 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f9f6 	bl	80044bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fa7d 	bl	8004600 <UART_CheckIdleState>
 8004106:	4603      	mov	r3, r0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	4b92      	ldr	r3, [pc, #584]	; (8004384 <UART_SetConfig+0x274>)
 800413c:	4013      	ands	r3, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	6979      	ldr	r1, [r7, #20]
 8004144:	430b      	orrs	r3, r1
 8004146:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	430a      	orrs	r2, r1
 8004180:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a80      	ldr	r2, [pc, #512]	; (8004388 <UART_SetConfig+0x278>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d120      	bne.n	80041ce <UART_SetConfig+0xbe>
 800418c:	4b7f      	ldr	r3, [pc, #508]	; (800438c <UART_SetConfig+0x27c>)
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b03      	cmp	r3, #3
 8004196:	d817      	bhi.n	80041c8 <UART_SetConfig+0xb8>
 8004198:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <UART_SetConfig+0x90>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	080041b1 	.word	0x080041b1
 80041a4:	080041bd 	.word	0x080041bd
 80041a8:	080041c3 	.word	0x080041c3
 80041ac:	080041b7 	.word	0x080041b7
 80041b0:	2301      	movs	r3, #1
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e0b5      	b.n	8004322 <UART_SetConfig+0x212>
 80041b6:	2302      	movs	r3, #2
 80041b8:	77fb      	strb	r3, [r7, #31]
 80041ba:	e0b2      	b.n	8004322 <UART_SetConfig+0x212>
 80041bc:	2304      	movs	r3, #4
 80041be:	77fb      	strb	r3, [r7, #31]
 80041c0:	e0af      	b.n	8004322 <UART_SetConfig+0x212>
 80041c2:	2308      	movs	r3, #8
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e0ac      	b.n	8004322 <UART_SetConfig+0x212>
 80041c8:	2310      	movs	r3, #16
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e0a9      	b.n	8004322 <UART_SetConfig+0x212>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a6f      	ldr	r2, [pc, #444]	; (8004390 <UART_SetConfig+0x280>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d124      	bne.n	8004222 <UART_SetConfig+0x112>
 80041d8:	4b6c      	ldr	r3, [pc, #432]	; (800438c <UART_SetConfig+0x27c>)
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041e4:	d011      	beq.n	800420a <UART_SetConfig+0xfa>
 80041e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041ea:	d817      	bhi.n	800421c <UART_SetConfig+0x10c>
 80041ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041f0:	d011      	beq.n	8004216 <UART_SetConfig+0x106>
 80041f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041f6:	d811      	bhi.n	800421c <UART_SetConfig+0x10c>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <UART_SetConfig+0xf4>
 80041fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004200:	d006      	beq.n	8004210 <UART_SetConfig+0x100>
 8004202:	e00b      	b.n	800421c <UART_SetConfig+0x10c>
 8004204:	2300      	movs	r3, #0
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e08b      	b.n	8004322 <UART_SetConfig+0x212>
 800420a:	2302      	movs	r3, #2
 800420c:	77fb      	strb	r3, [r7, #31]
 800420e:	e088      	b.n	8004322 <UART_SetConfig+0x212>
 8004210:	2304      	movs	r3, #4
 8004212:	77fb      	strb	r3, [r7, #31]
 8004214:	e085      	b.n	8004322 <UART_SetConfig+0x212>
 8004216:	2308      	movs	r3, #8
 8004218:	77fb      	strb	r3, [r7, #31]
 800421a:	e082      	b.n	8004322 <UART_SetConfig+0x212>
 800421c:	2310      	movs	r3, #16
 800421e:	77fb      	strb	r3, [r7, #31]
 8004220:	e07f      	b.n	8004322 <UART_SetConfig+0x212>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a5b      	ldr	r2, [pc, #364]	; (8004394 <UART_SetConfig+0x284>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d124      	bne.n	8004276 <UART_SetConfig+0x166>
 800422c:	4b57      	ldr	r3, [pc, #348]	; (800438c <UART_SetConfig+0x27c>)
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004234:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004238:	d011      	beq.n	800425e <UART_SetConfig+0x14e>
 800423a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800423e:	d817      	bhi.n	8004270 <UART_SetConfig+0x160>
 8004240:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004244:	d011      	beq.n	800426a <UART_SetConfig+0x15a>
 8004246:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800424a:	d811      	bhi.n	8004270 <UART_SetConfig+0x160>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <UART_SetConfig+0x148>
 8004250:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004254:	d006      	beq.n	8004264 <UART_SetConfig+0x154>
 8004256:	e00b      	b.n	8004270 <UART_SetConfig+0x160>
 8004258:	2300      	movs	r3, #0
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e061      	b.n	8004322 <UART_SetConfig+0x212>
 800425e:	2302      	movs	r3, #2
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	e05e      	b.n	8004322 <UART_SetConfig+0x212>
 8004264:	2304      	movs	r3, #4
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e05b      	b.n	8004322 <UART_SetConfig+0x212>
 800426a:	2308      	movs	r3, #8
 800426c:	77fb      	strb	r3, [r7, #31]
 800426e:	e058      	b.n	8004322 <UART_SetConfig+0x212>
 8004270:	2310      	movs	r3, #16
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e055      	b.n	8004322 <UART_SetConfig+0x212>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a47      	ldr	r2, [pc, #284]	; (8004398 <UART_SetConfig+0x288>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d124      	bne.n	80042ca <UART_SetConfig+0x1ba>
 8004280:	4b42      	ldr	r3, [pc, #264]	; (800438c <UART_SetConfig+0x27c>)
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004288:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800428c:	d011      	beq.n	80042b2 <UART_SetConfig+0x1a2>
 800428e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004292:	d817      	bhi.n	80042c4 <UART_SetConfig+0x1b4>
 8004294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004298:	d011      	beq.n	80042be <UART_SetConfig+0x1ae>
 800429a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800429e:	d811      	bhi.n	80042c4 <UART_SetConfig+0x1b4>
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <UART_SetConfig+0x19c>
 80042a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042a8:	d006      	beq.n	80042b8 <UART_SetConfig+0x1a8>
 80042aa:	e00b      	b.n	80042c4 <UART_SetConfig+0x1b4>
 80042ac:	2300      	movs	r3, #0
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e037      	b.n	8004322 <UART_SetConfig+0x212>
 80042b2:	2302      	movs	r3, #2
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e034      	b.n	8004322 <UART_SetConfig+0x212>
 80042b8:	2304      	movs	r3, #4
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e031      	b.n	8004322 <UART_SetConfig+0x212>
 80042be:	2308      	movs	r3, #8
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e02e      	b.n	8004322 <UART_SetConfig+0x212>
 80042c4:	2310      	movs	r3, #16
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e02b      	b.n	8004322 <UART_SetConfig+0x212>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a33      	ldr	r2, [pc, #204]	; (800439c <UART_SetConfig+0x28c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d124      	bne.n	800431e <UART_SetConfig+0x20e>
 80042d4:	4b2d      	ldr	r3, [pc, #180]	; (800438c <UART_SetConfig+0x27c>)
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80042dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042e0:	d011      	beq.n	8004306 <UART_SetConfig+0x1f6>
 80042e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042e6:	d817      	bhi.n	8004318 <UART_SetConfig+0x208>
 80042e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042ec:	d011      	beq.n	8004312 <UART_SetConfig+0x202>
 80042ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042f2:	d811      	bhi.n	8004318 <UART_SetConfig+0x208>
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <UART_SetConfig+0x1f0>
 80042f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fc:	d006      	beq.n	800430c <UART_SetConfig+0x1fc>
 80042fe:	e00b      	b.n	8004318 <UART_SetConfig+0x208>
 8004300:	2300      	movs	r3, #0
 8004302:	77fb      	strb	r3, [r7, #31]
 8004304:	e00d      	b.n	8004322 <UART_SetConfig+0x212>
 8004306:	2302      	movs	r3, #2
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e00a      	b.n	8004322 <UART_SetConfig+0x212>
 800430c:	2304      	movs	r3, #4
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e007      	b.n	8004322 <UART_SetConfig+0x212>
 8004312:	2308      	movs	r3, #8
 8004314:	77fb      	strb	r3, [r7, #31]
 8004316:	e004      	b.n	8004322 <UART_SetConfig+0x212>
 8004318:	2310      	movs	r3, #16
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e001      	b.n	8004322 <UART_SetConfig+0x212>
 800431e:	2310      	movs	r3, #16
 8004320:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800432a:	d16c      	bne.n	8004406 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800432c:	7ffb      	ldrb	r3, [r7, #31]
 800432e:	2b08      	cmp	r3, #8
 8004330:	d838      	bhi.n	80043a4 <UART_SetConfig+0x294>
 8004332:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <UART_SetConfig+0x228>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	0800435d 	.word	0x0800435d
 800433c:	08004365 	.word	0x08004365
 8004340:	0800436d 	.word	0x0800436d
 8004344:	080043a5 	.word	0x080043a5
 8004348:	08004373 	.word	0x08004373
 800434c:	080043a5 	.word	0x080043a5
 8004350:	080043a5 	.word	0x080043a5
 8004354:	080043a5 	.word	0x080043a5
 8004358:	0800437b 	.word	0x0800437b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800435c:	f7fe fb96 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 8004360:	61b8      	str	r0, [r7, #24]
        break;
 8004362:	e024      	b.n	80043ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004364:	f7fe fbb4 	bl	8002ad0 <HAL_RCC_GetPCLK2Freq>
 8004368:	61b8      	str	r0, [r7, #24]
        break;
 800436a:	e020      	b.n	80043ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <UART_SetConfig+0x290>)
 800436e:	61bb      	str	r3, [r7, #24]
        break;
 8004370:	e01d      	b.n	80043ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004372:	f7fe fb15 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8004376:	61b8      	str	r0, [r7, #24]
        break;
 8004378:	e019      	b.n	80043ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437e:	61bb      	str	r3, [r7, #24]
        break;
 8004380:	e015      	b.n	80043ae <UART_SetConfig+0x29e>
 8004382:	bf00      	nop
 8004384:	efff69f3 	.word	0xefff69f3
 8004388:	40013800 	.word	0x40013800
 800438c:	40021000 	.word	0x40021000
 8004390:	40004400 	.word	0x40004400
 8004394:	40004800 	.word	0x40004800
 8004398:	40004c00 	.word	0x40004c00
 800439c:	40005000 	.word	0x40005000
 80043a0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	77bb      	strb	r3, [r7, #30]
        break;
 80043ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d075      	beq.n	80044a0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	005a      	lsls	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	441a      	add	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b0f      	cmp	r3, #15
 80043d0:	d916      	bls.n	8004400 <UART_SetConfig+0x2f0>
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d8:	d212      	bcs.n	8004400 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f023 030f 	bic.w	r3, r3, #15
 80043e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	89fb      	ldrh	r3, [r7, #14]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	89fa      	ldrh	r2, [r7, #14]
 80043fc:	60da      	str	r2, [r3, #12]
 80043fe:	e04f      	b.n	80044a0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	77bb      	strb	r3, [r7, #30]
 8004404:	e04c      	b.n	80044a0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004406:	7ffb      	ldrb	r3, [r7, #31]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d828      	bhi.n	800445e <UART_SetConfig+0x34e>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <UART_SetConfig+0x304>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004439 	.word	0x08004439
 8004418:	08004441 	.word	0x08004441
 800441c:	08004449 	.word	0x08004449
 8004420:	0800445f 	.word	0x0800445f
 8004424:	0800444f 	.word	0x0800444f
 8004428:	0800445f 	.word	0x0800445f
 800442c:	0800445f 	.word	0x0800445f
 8004430:	0800445f 	.word	0x0800445f
 8004434:	08004457 	.word	0x08004457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004438:	f7fe fb28 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 800443c:	61b8      	str	r0, [r7, #24]
        break;
 800443e:	e013      	b.n	8004468 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004440:	f7fe fb46 	bl	8002ad0 <HAL_RCC_GetPCLK2Freq>
 8004444:	61b8      	str	r0, [r7, #24]
        break;
 8004446:	e00f      	b.n	8004468 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004448:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <UART_SetConfig+0x3a8>)
 800444a:	61bb      	str	r3, [r7, #24]
        break;
 800444c:	e00c      	b.n	8004468 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800444e:	f7fe faa7 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8004452:	61b8      	str	r0, [r7, #24]
        break;
 8004454:	e008      	b.n	8004468 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800445a:	61bb      	str	r3, [r7, #24]
        break;
 800445c:	e004      	b.n	8004468 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	77bb      	strb	r3, [r7, #30]
        break;
 8004466:	bf00      	nop
    }

    if (pclk != 0U)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d018      	beq.n	80044a0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	085a      	lsrs	r2, r3, #1
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	441a      	add	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004480:	b29b      	uxth	r3, r3
 8004482:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b0f      	cmp	r3, #15
 8004488:	d908      	bls.n	800449c <UART_SetConfig+0x38c>
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004490:	d204      	bcs.n	800449c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	60da      	str	r2, [r3, #12]
 800449a:	e001      	b.n	80044a0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	007a1200 	.word	0x007a1200

080044bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01a      	beq.n	80045d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ba:	d10a      	bne.n	80045d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	605a      	str	r2, [r3, #4]
  }
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af02      	add	r7, sp, #8
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004610:	f7fc fd4a 	bl	80010a8 <HAL_GetTick>
 8004614:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b08      	cmp	r3, #8
 8004622:	d10e      	bne.n	8004642 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004624:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f82d 	bl	8004692 <UART_WaitOnFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e023      	b.n	800468a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b04      	cmp	r3, #4
 800464e:	d10e      	bne.n	800466e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004650:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f817 	bl	8004692 <UART_WaitOnFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e00d      	b.n	800468a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b09c      	sub	sp, #112	; 0x70
 8004696:	af00      	add	r7, sp, #0
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	4613      	mov	r3, r2
 80046a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a2:	e0a5      	b.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	f000 80a1 	beq.w	80047f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ae:	f7fc fcfb 	bl	80010a8 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80046be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d13e      	bne.n	8004742 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046d8:	667b      	str	r3, [r7, #100]	; 0x64
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e6      	bne.n	80046c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3308      	adds	r3, #8
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	663b      	str	r3, [r7, #96]	; 0x60
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3308      	adds	r3, #8
 8004714:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004716:	64ba      	str	r2, [r7, #72]	; 0x48
 8004718:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800471c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e5      	bne.n	80046f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e067      	b.n	8004812 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d04f      	beq.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800475a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800475e:	d147      	bne.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004768:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800477e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004788:	637b      	str	r3, [r7, #52]	; 0x34
 800478a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800478e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e6      	bne.n	800476a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3308      	adds	r3, #8
 80047a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	613b      	str	r3, [r7, #16]
   return(result);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3308      	adds	r3, #8
 80047ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047bc:	623a      	str	r2, [r7, #32]
 80047be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	69f9      	ldr	r1, [r7, #28]
 80047c2:	6a3a      	ldr	r2, [r7, #32]
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e5      	bne.n	800479c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2220      	movs	r2, #32
 80047d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e010      	b.n	8004812 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69da      	ldr	r2, [r3, #28]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4013      	ands	r3, r2
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	429a      	cmp	r2, r3
 800480c:	f43f af4a 	beq.w	80046a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3770      	adds	r7, #112	; 0x70
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <__libc_init_array>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	4d0d      	ldr	r5, [pc, #52]	; (8004854 <__libc_init_array+0x38>)
 8004820:	4c0d      	ldr	r4, [pc, #52]	; (8004858 <__libc_init_array+0x3c>)
 8004822:	1b64      	subs	r4, r4, r5
 8004824:	10a4      	asrs	r4, r4, #2
 8004826:	2600      	movs	r6, #0
 8004828:	42a6      	cmp	r6, r4
 800482a:	d109      	bne.n	8004840 <__libc_init_array+0x24>
 800482c:	4d0b      	ldr	r5, [pc, #44]	; (800485c <__libc_init_array+0x40>)
 800482e:	4c0c      	ldr	r4, [pc, #48]	; (8004860 <__libc_init_array+0x44>)
 8004830:	f000 f820 	bl	8004874 <_init>
 8004834:	1b64      	subs	r4, r4, r5
 8004836:	10a4      	asrs	r4, r4, #2
 8004838:	2600      	movs	r6, #0
 800483a:	42a6      	cmp	r6, r4
 800483c:	d105      	bne.n	800484a <__libc_init_array+0x2e>
 800483e:	bd70      	pop	{r4, r5, r6, pc}
 8004840:	f855 3b04 	ldr.w	r3, [r5], #4
 8004844:	4798      	blx	r3
 8004846:	3601      	adds	r6, #1
 8004848:	e7ee      	b.n	8004828 <__libc_init_array+0xc>
 800484a:	f855 3b04 	ldr.w	r3, [r5], #4
 800484e:	4798      	blx	r3
 8004850:	3601      	adds	r6, #1
 8004852:	e7f2      	b.n	800483a <__libc_init_array+0x1e>
 8004854:	080048c4 	.word	0x080048c4
 8004858:	080048c4 	.word	0x080048c4
 800485c:	080048c4 	.word	0x080048c4
 8004860:	080048c8 	.word	0x080048c8

08004864 <memset>:
 8004864:	4402      	add	r2, r0
 8004866:	4603      	mov	r3, r0
 8004868:	4293      	cmp	r3, r2
 800486a:	d100      	bne.n	800486e <memset+0xa>
 800486c:	4770      	bx	lr
 800486e:	f803 1b01 	strb.w	r1, [r3], #1
 8004872:	e7f9      	b.n	8004868 <memset+0x4>

08004874 <_init>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	bf00      	nop
 8004878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487a:	bc08      	pop	{r3}
 800487c:	469e      	mov	lr, r3
 800487e:	4770      	bx	lr

08004880 <_fini>:
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004882:	bf00      	nop
 8004884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004886:	bc08      	pop	{r3}
 8004888:	469e      	mov	lr, r3
 800488a:	4770      	bx	lr
